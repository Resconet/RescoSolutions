{"version":3,"sources":["api/tabletTools.ts","store.ts","api/synchronization.ts","api/scanQR.ts","api/login.ts","assets/icons/chevron-right.svg","components/Button/index.tsx","api/listSource.ts","containers/WelcomeScreen/index.tsx","assets/icons/chevron-left.svg","assets/icons/qr-scan.svg","components/TextInput/index.tsx","components/Switch/index.tsx","containers/LoginScreen/index.tsx","api/androidBackClick.ts","navigation/LoginNavigator/index.tsx","api/houstonService.ts","assets/icons/profile.svg","api/profileLoader.ts","api/annotationsLoader.ts","components/LoadingWheel/index.tsx","components/AnnotationImage/index.tsx","api/configuration.ts","containers/NavbarScrollWrapper/index.tsx","assets/icons/search.svg","assets/icons/List-2.svg","assets/icons/List-3.svg","components/EntitiesList/index.tsx","assets/icons/cpu.svg","assets/icons/arrow-right.svg","components/EquipmentListItem/index.tsx","components/EquipmentGridItem/index.tsx","containers/EquipmentList/index.tsx","assets/icons/plus.svg","assets/icons/guide.svg","api/singlePropertyLoader.ts","components/GuideListItem/index.tsx","assets/icons/up-down.svg","components/NavbarSelect/index.tsx","containers/LibraryScreen/index.tsx","assets/icons/call.svg","components/ExpertListItem/index.tsx","api/calls.ts","api/initiateUserCall.ts","containers/ExpertsList/index.tsx","assets/icons/page.svg","components/TabBar/index.tsx","assets/icons/arrow.svg","containers/EquipmentDetail/index.tsx","containers/GuidesList/index.tsx","components/ModalContentWrapper/modalContentWrapper.tsx","api/modelGuideListSource.ts","navigation/EquipmentNavigator/index.tsx","containers/EquipmentListTablet/index.tsx","containers/CollectScreen/store.ts","assets/icons/chevron-down.svg","components/FieldSelect/index.tsx","containers/CollectScreenOne/index.tsx","assets/icons/trash.svg","components/PhotoPicker/index.tsx","components/CollectStep/index.tsx","containers/CollectScreenTwo/index.tsx","components/CollectProgress/index.tsx","components/FeedbackModal/feedbackModal.tsx","components/FeedbackModal/index.ts","components/PDFViewer/PDFViewer.tsx","components/PDFViewer/index.ts","containers/GuideDetail/guideDetail.tsx","containers/CollectScreenThree/index.tsx","navigation/CollectNavigator/index.tsx","containers/CollectScreen/index.tsx","navigation/TabBarNavigator/index.tsx","components/StepPreview/index.tsx","containers/GuideDetail/index.ts","containers/GuideDetailTablet/index.tsx","assets/icons/check-circle.svg","components/SuccessModal/index.tsx","navigation/MainNavigator/index.tsx","assets/icons/logout.svg","assets/icons/sync.svg","components/ProfileAction/index.tsx","containers/ProfileScreen/index.tsx","navigation/RootNavigator/index.tsx","api/deeplink.ts","components/DeeplinkHandler/index.tsx","components/LoadingScreen/index.tsx","containers/PinchableImage/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Orientation","setSelectedEquipment","createAction","setSelectedGuide","setSelectedModel","setZoomAnnotation","setEquipment","setCategories","setImagesToSave","setPdfViewerObject","rootReducer","createReducer","selectedEquipment","selectedGuide","selectedModel","zoomAnnotation","equipment","categories","imagesToSave","builder","addCase","state","action","payload","pdfViewerObject","store","configureStore","reducer","MobileCRM","window","doSync","Application","synchronizeOnForeground","scanQr","params","Promise","resolve","reject","bridge","command","JSON","stringify","barcode","error","Platform","scanBarCode","getLoginDataWithQR","a","ScannerTitle","ScannerDescription","IsSquareShown","loginString","login","parseLogin","isUserLoggedIn","Configuration","requestObject","config","settings","isDemoUser","waitForPassword","platform","canUsePassword","undefined","deviceIdentifier","onGlobalEvent","args","loginData","url","userName","password","savePassword","loginArray","split","loginItem","prop","substring","indexOf","resolveUrl","organization","includes","startsWith","Button","children","onPress","disabled","theme","classList","className","onClick","FilterType","isTablet","getOrientation","Portrait","Math","max","document","documentElement","clientWidth","innerWidth","clientHeight","innerHeight","Landscape","useOrientation","useState","orientation","setOrientation","useEffect","handler","orient","addEventListener","WelcomeScreen","loginNavigate","useContext","LoginNavigationContext","rootNavigate","RootNavigationContext","LoginFormContext","setMail","setOrganization","setPassword","onLoginQRClick","isTabletLandscape","useMemo","thisIsHouston","src","NextIcon","TextInput","value","onChange","label","placeholder","type","multiline","noMargin","startCapital","maxLength","pwdVisible","setPwdVisible","isPassword","handleChange","e","target","handleFocus","body","style","overflow","handleFocusEnd","marginBottom","onInput","element","height","offsetHeight","toString","scrollHeight","onFocus","onBlur","required","autoCapitalize","Switch","isActive","setActive","LoginScreen","mail","setSavePassword","allFieldsAreFilled","Boolean","showLoginErrorMessage","bounce","cssTransition","enter","exit","toast","hideProgressBar","autoClose","closeButton","transition","draggable","clearWaitingQueue","onQRClick","onToggleClick","useCallback","newValue","renderedP","ChevronLeftIcon","QRIcon","invokeStaticMethodAsync","handlers","registerAndroidBackHandler","context","invoke","handlerWithContextExists","find","item","handlerContextIndex","splice","push","Views","createContext","LoginNavigator","view","setView","androidBackHandler","navigate","newView","viewNameToIndex","Provider","index","ListViewDataSource","entityName","attributes","pageSize","searchFields","nToN","filterType","currentPage","filter","this","entity","FetchXml","Entity","addLink","nToNEntityName","nToNfield","nToNIDField","Filter","where","linkFilter","targetId","linkentities","attribute","addAttribute","fetch","Fetch","count","page","execute","entities","parsedEntities","parseEntities","onlyProperties","map","properties","_privVals","field","childFilter","contains","filters","HoustonService","instance","HoustonServiceBridge","loadProfileInfoAsync","userId","systemUserId","DynamicEntity","loadAsync","user","name","position","rh_position","id","getImageAsync","regarding","title","addAttributes","mainFilter","nameSubfilter","regardingSubfilter","length","loadDocumentBodyAsync","then","base64","catch","LoadingWheel","AnnotationImage","fetchMethod","annotationId","annotationName","isThumbnail","placeholderIcon","hasFullscreenMode","onImageLoad","dispatch","useDispatch","useSelector","imageData","setImageData","fetchByIdAndName","fetchByUniqueName","fetchFromStore","image","imageUniqueName","showPlaceholder","showImage","houstonService","loadImageThumbByImageUniqueName","loadImageByUniqueName","srcB64","data","dataB64","endsWith","MEDIA_PDF_SUFFIX","alt","onLoadCapture","scrollCached","NavbarScrollWrapper","forwardRef","ref","headerElement","extraIconElement","onScrollEnd","onProfileClickCallback","profileId","setProfileId","direction","setDirection","NavbarScrollClass","loadProfileId","parseDeeplinkUrl","entityId","loadEquipment","loadGuide","resolveNotFoundData","nameOfNotFoundedEntity","getNetworkInfo","connected","messageBox","UI","MessageBox","items","showAsync","alert","loadEquipmentById","equipmentData","loadGuideById","guideData","setIsTabletLandscape","data-test","ProfileIcon","onScroll","event","scroll","scrollTop","abs","nextEntitiesLength","EntitiesList","DataSource","ListItem","searchPlaceholder","onItemClick","small","GridItem","setEntities","isGrid","setIsGrid","useImperativeHandle","loadNextEntities","loadInitialEntities","initial","repetitive","getNextPage","nextPageEntities","filterEntities","filteredNextPageEntities","unfilteredEntities","profile","filteredEntities","statuscode","statusReason","renderedEntities","i","handleSearch","setFilter","SearchIcon","ListIcon","GridIcon","EquipmentListItem","serialnumber","CPUIcon","ArrowRightIcon","EquipmentGridItem","EquipmentList","entitiesListRef","useRef","handleScrollEnd","current","handleItemClick","useResizeDetector","width","setSmall","React","memo","loadSingleProperty","fieldName","GuideListItemComponent","rh_name","rh_annotationsubject","rh_guideid","setGuideData","stepsLength","steps","loadGuideData","categoryId","guideCategory","GuideIcon","NavbarSelect","header","selectedItem","setSelectedItem","findItemByValue","newItem","UpDownIcon","LibraryScreen","onPlusClickCallback","selectedCategory","setSelectedCategory","mainNavigate","MainNavigationContext","loadCategories","loadAllCategories","loadedCategories","PlusIcon","GuideListItem","ExpertListItem","CallIcon","makeCall","userPrimaryName","invokeMethodAsync","Reference","initiateUserCall","askUserToCall","ExpertsList","TabBar","navigateTabBar","useTabletUI","swiperClassList","iconCpuClassList","iconPageClassList","iconCallClassList","IconCpu","IconPage","IconCall","EquipmentDetail","onEquipmentSet","onBackClick","source","onModelClick","equipmentNavigate","EquipmentNavigationContext","isHeaderVisible","setHeaderVisible","modelName","setModelName","NavbarClassList","loadModelName","modelId","onUserClick","onGuideClick","renderedGuides","guideList","renderedExperts","filteredExperts","users","expert","titleEl","querySelector","titleTop","getBoundingClientRect","top","isModel","setTimeout","color","display","alignItems","alignContent","LinkArrow","marginLeft","description","serialNumber","installedBy","inventoryIdentifier","moreGuides","GuidesList","listSource","caption","dataSource","setDataSource","ModalContentWrapper","onCancelClick","contentHeightPercentage","closeButtonText","roundedCorner","contentWidthPercentage","borderRadius","ModelGuideListSource","searchText","loaded","loaderFunction","loadModelGuideList","loadEquipmentGuideList","guide","EquipmentNavigator","moreUsers","equipmentSource","setEquipmentSource","modelSource","setModelSource","experts","setIsModelOpen","service","loadModelById","model","isModelOpen","equipmentGuideListDataSource","modelGuideListDataSource","Drawer","anchor","open","PaperProps","backgroundColor","EquipmentListTablet","onProfileClick","showEquipmentPreview","setShowEquipmentPreview","handleEquipmentSet","handleOnBackClick","sidebar","pullRight","docked","touch","sidebarClassName","InitialState","category","coverPhoto","photo","CollectFormReducer","key","Error","CollectFormContext","useCollectFormContext","FieldSelect","ChevronDownIcon","CollectScreenOne","allEquipmentData","allCategoriesData","collectNavigate","CollectNavigationContext","IMAGE_SIZE","PhotoPicker","slim","onPlusClick","askUserToPick","photoMethod","handleCapturePhotoClick","handlePickImageClick","response","serviceTyped","Services","DocumentService","maxImageSize","capturePhoto","fileinfo","readFileAsBase64","filePath","selectPhoto","TrashIcon","imageToBlob","mimeType","result","blob","removeCollectedImageWithThumbnail","images","imageName","img","isWantedImage","isWantedThumb","URL","revokeObjectURL","CollectStep","stepId","hideTrashIcon","stepData","s","updateStepField","stepDataCopy","filtredImages","imageToResize","HoustonServiceTools","createNewImage","normalizeImageSize","normalizedImage","createImageThumbnail","thumbnailImage","normalizedImageBlob","thumbnailBlob","normalizedImageUrl","createObjectURL","thumbnailUrl","generateImageUniqueName","imageToSave","thumbnailToSave","stepsCopy","step","givenId","deletingStep","isDeletingStep","newId","deleteStepById","CollectScreenTwo","lastTitleIsFilled","sortedById","slice","sort","b","createNewEmptyStep","lastStepId","coverPhotoBase64","setCoverPhotoBase64","handleCoverPhotoChange","newImagesToSave","newImageToSave","newThumbnailToSave","categoryElement","titleElement","descriptionElement","renderedSteps","renderedNewStepButton","onPreviewPress","trim","CollectProgress","currentVal","maxVal","stepString","percentageValue","toFixed","FeedbackModal","submitClick","comment","setComment","selectedOptionRating","setSelectedOptionRating","text","rating","minrating","maxrating","regardingobjectid","LoadingModal","justifyContent","margin","PDFViewer","closeModal","pdfObject","loading","mediaUniqueName","pdfObjectUrl","objectURL","widthPx","heightPx","onLoadError","message","AnnotationImageWrapper","ImageFromStore","AvatarComponentWrapper","regardingId","GuideDetail","setFeedbackMessage","SuccessModalNavigationContext","categoryName","setCategoryName","displayReview","setDisplayReview","displayPDFView","setDisplayPDFView","timePassed","setTimePassed","timeoutId","setTimeoutId","pdfViewerDocumentObject","houstonServiceRef","handleBackClick","clearTimeout","cancelGuide","getState","returnClickCallbackHandler","feedback","MessageToDisplay","saveFeedback","openPDFClick","loadPDFByUniqueName","PDFMedia","blobUrl","cancelable","preventDefault","usedInMobileApp","imageComponent","avatarComponent","showPDFViewerAction","blobUrlToBase64","xhr","XMLHttpRequest","responseType","onload","status","reader","FileReader","onloadend","readAsDataURL","statusText","send","CollectScreenThree","onSendCallback","collectedGuide","setCollectedGuide","createCollectedGuide","generateNewGuide","newGuide","collected","guideId","generateGuid","author","logicalName","version","generateSteps","authors","equipmentList","content","mediaProperties","fit","Fit","Cover","showProgress","setShowProgress","progressValue","setProgressValue","publishGuide","saveImagePromises","fileName","saveMedia","all","saveGuide","onSendPress","Modal","CircularProgress","variant","CollectNavigator","viewName","mainHeader","CollectScreen","useImmerReducer","TabBarNavigator","tabletLandscapeUI","setTabletLandsapeUI","setIsSidebarOpened","isCollectSidebarOpen","setIsCollectSidebarOpen","askUserToCancel","overlayElement","getElementById","overlayElement1","onSendCollectSuccess","overlayId","animateTransitions","StepPreview","imageIniqueName","stepIndex","stepElement","mainElement","getElementsByClassName","scrollTo","behavior","offsetTop","GuideDetailTablet","useTabletExtension","renderedGuideStepsPreviews","introductionElement","FeedbackMessage","SuccessModal","onCloseClickCallback","feedbackMessage","CheckCircleIcon","MainNavigator","fullscreenModalState","setFullscreenModalState","successModalState","setSuccessModalState","isLandscapeTablet","newModalState","ProfileAction","iconPath","ChevronRightIcon","ProfileScreen","showBackButton","profileData","setProfileData","loadProfileData","loadAppVersion","appVersion","loadProfileInfo","profileInfo","isLoggedIn","applicationVersion","onLogoutClick","askUserToLogout","onSyncClick","BackIcon","LogoutIcon","SyncIcon","process","RootNavigator","profileWidth","setProfileWidth","loginUser","isUserLogged","onClose","registerDeeplinkHandler","deeplinkHandler","DeeplinkHandler","alertUserToLogIn","LoadingScreen","PinchableImage","velocityAnimation","centerOnInit","zoomOut","wrapperClass","App","isSyncRunning","setSyncRunning","enableDebug","smoothscroll","polyfill","loadInitialData","registerSyncHandlers","registerAndroidBackHandlers","loadAllEquipment","loadedEquipment","preventBackButton","callback","registerSyncFinishedHandler","limit","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f857ab1f.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\nenum Orientation {\n\tLandscape,\n\tPortrait,\n}\n\nconst isTablet = (): boolean => {\n\tif (getOrientation() === Orientation.Portrait) {\n\t\tconst vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0);\n\t\treturn vw > 500; // This is constant according https://www.w3schools.com/howto/howto_css_media_query_breakpoints.asp\n\t} else {\n\t\tconst vh = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0);\n\t\treturn vh > 500; // This is constant according https://www.w3schools.com/howto/howto_css_media_query_breakpoints.asp\n\t}\n};\n\nconst registerChangeOrientationHandler = (handler: (orientation: Orientation) => void): void => {\n\n\twindow.addEventListener(\"resize\", () => {\n\t\thandler(getOrientation());\n\t});\n};\n\nconst getOrientation = (): Orientation => {\n\tconst vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0);\n\tconst vh = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0);\n\treturn vw > vh ? Orientation.Landscape : Orientation.Portrait;\n};\n\nconst useOrientation = (): Orientation => {\n\tconst [orientation, setOrientation] = useState(getOrientation());\n\tuseEffect(() => {\n\t\tregisterChangeOrientationHandler((orient) => {\n\t\t\tsetOrientation(orient);\n\t\t});\n\t});\n\n\treturn orientation;\n};\nexport { isTablet, Orientation, useOrientation };\n","import { Category, Equipment, Guide, MediaMimeType, Model } from \"@resconet/houston-service\";\nimport { configureStore, createAction, createReducer } from \"@reduxjs/toolkit\";\n\nexport type FetchMethod = \"byUniqueName\" | \"byIdAndName\" | \"byUniqueNameFromStore\";\n\ninterface Annotation {\n\tfetchMethod: FetchMethod;\n\tannotationName: string;\n\tannotationId: string;\n}\n\nexport type PDFDocumentObject = {\n\tmediaUniqueName: string;\n\tobjectURL: string;\n\tloading?: boolean;\n\terror?: Error;\n};\nexport interface State {\n\tselectedEquipment: Equipment | null;\n\tselectedGuide: Guide | null;\n\tselectedModel: Model | null;\n\tzoomAnnotation: Annotation | null;\n\tequipment: Equipment[];\n\tcategories: Category[];\n\timagesToSave: ImageToSave[];\n\tpdfViewerObject?: PDFDocumentObject;\n}\n\nconst DefaultState: State = {\n\tselectedEquipment: null,\n\tselectedGuide: null,\n\tselectedModel: null,\n\tzoomAnnotation: null,\n\tequipment: [],\n\tcategories: [],\n\timagesToSave: [],\n};\n\nexport type ImageToSave = {\n\timageUniqueName: string;\n\turl: string;\n\tmimeType: MediaMimeType;\n};\n\nconst setSelectedEquipment = createAction<Equipment | null>(\"SET_SELECTED_EQUIPMENT\");\nconst setSelectedGuide = createAction<Guide | null>(\"SET_SELECTED_GUIDE\");\nconst setSelectedModel = createAction<Model | null>(\"SET_SELECTED_MODEL\");\nconst setZoomAnnotation = createAction<Annotation | null>(\"SET_ZOOM_ANNOTATION\");\nconst setEquipment = createAction<Equipment[]>(\"SET_EQUIPMENT\");\nconst setCategories = createAction<Category[]>(\"SET_CATEGORIES\");\nconst setImagesToSave = createAction<ImageToSave[]>(\"SET_IMAGES_FOR_SAVE\");\nconst setPdfViewerObject = createAction<PDFDocumentObject>(\"SET_PDFVIEWEROBJECT\");\n\n\nconst rootReducer = createReducer(DefaultState, (builder) => {\n\tbuilder.addCase(setSelectedEquipment, (state, action) => {\n\t\tstate.selectedEquipment = action.payload;\n\t});\n\n\tbuilder.addCase(setSelectedGuide, (state, action) => {\n\t\tstate.selectedGuide = action.payload;\n\t});\n\n\tbuilder.addCase(setZoomAnnotation, (state, action) => {\n\t\tstate.zoomAnnotation = action.payload;\n\t});\n\n\tbuilder.addCase(setEquipment, (state, action) => {\n\t\tstate.equipment = action.payload;\n\t});\n\n\tbuilder.addCase(setCategories, (state, action) => {\n\t\tstate.categories = action.payload;\n\t});\n\n\tbuilder.addCase(setImagesToSave, (state, action) => {\n\t\tstate.imagesToSave = action.payload;\n\t});\n\n\tbuilder.addCase(setSelectedModel, (state, action) => {\n\t\tstate.selectedModel = action.payload;\n\t});\n\n\tbuilder.addCase(setPdfViewerObject, (state, action) => {\n\t\tstate.pdfViewerObject = action.payload;\n\t});\n});\n\nconst store = configureStore({ reducer: rootReducer });\nexport { setSelectedEquipment, setSelectedGuide, setZoomAnnotation, setEquipment, setCategories, setImagesToSave, setPdfViewerObject };\nexport default store;\n","const MobileCRM = window.MobileCRM;\n\nconst doSync = (): void => {\n\tMobileCRM.Application.synchronizeOnForeground(false);\n};\n\nconst registerSyncFinishedHandler = (callback: () => void): void => {\n\tMobileCRM.bridge.onGlobalEvent(\"SyncFinished\", callback, true);\n};\n\nconst registerSyncStartedHandler = (callback: () => void): void => {\n\tMobileCRM.bridge.onGlobalEvent(\"SyncStarted\", callback, true);\n};\n\nexport { doSync, registerSyncFinishedHandler, registerSyncStartedHandler };\n","export const scanQr = (params?: QrReaderParams): Promise<string> => {\n\treturn new Promise<string>((resolve, reject) => {\n\t\tif (params) {\n\t\t\tMobileCRM.bridge.command(\n\t\t\t\t\"scanBarcode\",\n\t\t\t\tJSON.stringify(params),\n\t\t\t\t(barcode) => {\n\t\t\t\t\tresolve(barcode[0]);\n\t\t\t\t},\n\t\t\t\t(error) => {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t);\n\t\t} else {\n\t\t\tMobileCRM.Platform.scanBarCode(\n\t\t\t\t(barcode) => {\n\t\t\t\t\tresolve(barcode[0]);\n\t\t\t\t},\n\t\t\t\t(error) => {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t});\n};\n\nexport interface QrReaderParams {\n\tScannerTitle: string;\n\tScannerDescription: string;\n\tIsSquareShown: boolean;\n}\n","import { scanQr } from \"./scanQR\";\n\nconst MobileCRM = window.MobileCRM;\n\ninterface Login {\n\turl: string;\n\tuserName: string;\n\tpassword: string;\n\tsavePassword: boolean;\n}\n\nconst getLoginDataWithQR = async (): Promise<Login> => {\n\tconst loginString = await scanQr({\n\t\tScannerTitle: \"Login with QR\",\n\t\tScannerDescription: \"Place the QR code inside the area. Scanning will start automatically.\",\n\t\tIsSquareShown: true,\n\t});\n\tconst login = parseLogin(loginString);\n\treturn login;\n};\n\nconst loginUser = (login: Login): void => {\n\tMobileCRM.bridge.invokeStaticMethodAsync(\"MobileCrm\", \"MobileCrm.Controllers.HomeForm\", \"SetupLoginAndSync\", [\n\t\t0, // 0=Standard, 1=External, 2=Anonymous, 3=CurrentUser, 4=OAuth2\n\t\tresolveUrl(login.url),\n\t\tlogin.userName,\n\t\tlogin.password,\n\t\tlogin.savePassword,\n\t]);\n};\n\nconst logout = (): Promise<void> => {\n\treturn new Promise<void>((resolve, reject) => {\n\t\tMobileCRM.bridge.invokeStaticMethodAsync(\n\t\t\t\"MobileCrm\",\n\t\t\t\"MobileCrm.Controllers.LoginForm\",\n\t\t\t\"LogoutUser\",\n\t\t\t[null, null, true], // Always pass two NULLs and third argument means \"wipeUser\" - it clears user info, metadata and customization\n\t\t\tfunction () {\n\t\t\t\tresolve();\n\t\t\t},\n\t\t\tfunction (error) {\n\t\t\t\treject(error);\n\t\t\t}\n\t\t);\n\t});\n};\n\nconst isUserLoggedIn = (): Promise<boolean> => {\n\treturn new Promise<boolean>((resolve, reject) => {\n\t\tMobileCRM.Configuration.requestObject(\n\t\t\t(config) => {\n\t\t\t\tresolve(!config.settings.isDemoUser);\n\t\t\t},\n\t\t\t(error) => {\n\t\t\t\treject(error);\n\t\t\t}\n\t\t);\n\t});\n};\n\nconst waitForPassword = <T>(action: () => T): Promise<T> => {\n\treturn new Promise((resolve) => {\n\t\tMobileCRM.Configuration.requestObject((config) => {\n\t\t\tMobileCRM.Platform.requestObject(\n\t\t\t\t(platform) => {\n\t\t\t\t\tif (config.settings.canUsePassword || config.settings.isDemoUser || platform.deviceIdentifier === undefined) resolve(action());\n\t\t\t\t\telse {\n\t\t\t\t\t\tMobileCRM.bridge.onGlobalEvent(\n\t\t\t\t\t\t\t\"ConfigChanged\",\n\t\t\t\t\t\t\t(args) => {\n\t\t\t\t\t\t\t\tif (args.settings.canUsePassword) resolve(action());\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t() => {\n\t\t\t\t\t//\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t});\n};\n\nconst parseLogin = (loginData: string): Login => {\n\tconst login = { url: \"\", userName: \"\", password: \"\", savePassword: true };\n\tconst loginArray = loginData.split(/\\r\\n|\\n|\\r/);\n\n\tfor (const loginItem of loginArray) {\n\t\tconst prop = [loginItem.split(\"=\")[0], loginItem.substring(loginItem.indexOf(\"=\") + 1)];\n\n\t\tswitch (prop[0]) {\n\t\t\tcase \"Url\":\n\t\t\t\tlogin.url = resolveUrl(prop[1]);\n\t\t\t\tbreak;\n\t\t\tcase \"UserName\":\n\t\t\t\tlogin.userName = prop[1];\n\t\t\t\tbreak;\n\t\t\tcase \"Password\":\n\t\t\t\tlogin.password = prop[1];\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn login;\n};\n\nconst resolveUrl = (organization: string): string => {\n\tif (organization.includes(\"/\")) {\n\t\treturn organization;\n\t} else if (organization.startsWith(\"@\")) {\n\t\treturn `https://dev-houston.resco.net/${organization.split(\"@\")[1]}`;\n\t} else {\n\t\treturn `https://houston.resco.net/${organization}`;\n\t}\n};\n\nexport { getLoginDataWithQR, loginUser, isUserLoggedIn, logout, waitForPassword };\n","export default __webpack_public_path__ + \"static/media/chevron-right.771f5536.svg\";","import { ReactElement } from \"react\";\nimport \"./style.scss\";\n\ninterface Props {\n\tchildren: string;\n\tonPress: () => void;\n\tdisabled?: boolean;\n\ttheme?: \"minimal\" | string;\n}\n\nconst Button = ({ children, onPress, disabled, theme }: Props): ReactElement => {\n\tconst classList = `button ${theme === \"selected\" && \"button--selected\"} ${theme === \"minimal\" && \"button--minimal\"} ${theme === \"inverted\" && \"button--inverted\"} ${disabled && \"button--disabled\"}`\n\n\treturn (\n\t\t<div className={classList} onClick={onPress}>\n\t\t\t{children}\n\t\t</div>\n\t);\n};\n\nexport default Button;\n","import { AppListSource } from \"@resconet/houston-service/dist/esm/lib/types/listSource\";\nimport { waitForPassword } from \"./login\";\n\nconst MobileCRM = window.MobileCRM;\n\nexport interface NtoN {\n\tnToNEntityName: string;\n\tnToNfield: string;\n\tnToNIDField: string;\n\ttargetId: string;\n\tlinkFilter: string;\n}\n\nenum FilterType {\n\tcontains,\n\tstartsWith,\n}\n\n// This is example, which fetch users owned by equipment (\"d235d851-8b6d-45f4-a1ad-8e6255b0dc50\")\n\n// const testLinkedEntity = (): void => {\n// \tconst entity = new MobileCRM.FetchXml.Entity(\"systemuser\");\n// \tentity.addLink(\"rh_equipmentexpert\", \"systemuserid\", \"id\", \"inner\");\n// \tconst filter = new MobileCRM.FetchXml.Filter();\n// \tfilter.where(\"assetid\", \"eq\", \"d235d851-8b6d-45f4-a1ad-8e6255b0dc50\");\n// \tentity.linkentities[0].filter = filter;\n// \tentity.addAttributes();\n\n// \tconst fetch = new MobileCRM.FetchXml.Fetch(entity);\n// \tfetch.execute(\"DynamicEntities\", (entities) => {\n// \t\tMobileCRM.bridge.alert(JSON.stringify(entities));\n// \t});\n// };\n\nclass ListViewDataSource implements AppListSource {\n\tprivate currentPage: number;\n\tprivate entityName: string;\n\tprivate pageSize: number;\n\tprivate searchFields?: string[];\n\tprivate filter?: MobileCRM.FetchXml.Filter;\n\tprivate attributes: string[];\n\tprivate nToN?: NtoN | null;\n\tprivate filterType: FilterType;\n\n\tpublic constructor(\n\t\tentityName: string,\n\t\tattributes: string[],\n\t\tpageSize: number,\n\t\tsearchFields?: string[],\n\t\tnToN?: NtoN | null,\n\t\tfilterType: FilterType = FilterType.startsWith\n\t) {\n\t\tthis.entityName = entityName;\n\t\tthis.attributes = attributes;\n\t\tthis.currentPage = 1;\n\t\tthis.pageSize = pageSize;\n\t\tthis.searchFields = searchFields;\n\t\tthis.nToN = nToN;\n\t\tthis.filterType = filterType;\n\t}\n\n\tpublic getNextPage(): Promise<Record<string, unknown>[]> {\n\t\treturn new Promise<Record<string, unknown>[]>((resolve, reject) => {\n\t\t\tconst entity = new MobileCRM.FetchXml.Entity(this.entityName);\n\n\t\t\tif (this.nToN) {\n\t\t\t\tentity.addLink(this.nToN.nToNEntityName, this.nToN.nToNfield, this.nToN.nToNIDField, \"inner\");\n\t\t\t\tconst filter = new MobileCRM.FetchXml.Filter();\n\t\t\t\tfilter.where(this.nToN.linkFilter, \"eq\", this.nToN.targetId);\n\t\t\t\tentity.linkentities[0].filter = filter;\n\t\t\t}\n\n\t\t\tfor (const attribute of this.attributes) {\n\t\t\t\tentity.addAttribute(attribute);\n\t\t\t}\n\n\t\t\tif (this.filter) {\n\t\t\t\tentity.filter = this.filter;\n\t\t\t}\n\n\t\t\tconst fetch = new MobileCRM.FetchXml.Fetch(entity);\n\t\t\tfetch.count = this.pageSize;\n\t\t\tfetch.page = this.currentPage;\n\n\t\t\twaitForPassword(() => {\n\t\t\t\tfetch.execute(\n\t\t\t\t\t\"DynamicEntities\",\n\t\t\t\t\t(entities: MobileCRM.DynamicEntity[]) => {\n\t\t\t\t\t\tthis.currentPage++;\n\t\t\t\t\t\tconst parsedEntities = this.parseEntities(entities);\n\t\t\t\t\t\tresolve(parsedEntities);\n\t\t\t\t\t},\n\t\t\t\t\t(error) => {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate parseEntities(entities: MobileCRM.DynamicEntity[]): Record<string, unknown>[] {\n\t\tconst onlyProperties = entities.map((e) => e.properties);\n\t\tonlyProperties.map((properties) => (properties.entityName = entities[0]?.entityName));\n\t\tconst withoutPrivateValues = onlyProperties.map(({ _privVals, ...keepAttrs }) => keepAttrs);\n\t\treturn withoutPrivateValues;\n\t}\n\n\tpublic setFilter(filter: string): void {\n\t\t//set page on start, when is filter changed\n\t\tthis.currentPage = 1;\n\n\t\tif (!this.searchFields) {\n\t\t\treturn;\n\t\t}\n\t\t//empty string clean filter\n\t\tif (!filter) {\n\t\t\tthis.filter = undefined;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.filter = new MobileCRM.FetchXml.Filter();\n\t\tthis.filter.type = \"or\";\n\n\t\tfor (const field of this.searchFields) {\n\t\t\tconst childFilter = new MobileCRM.FetchXml.Filter();\n\n\t\t\tswitch (this.filterType) {\n\t\t\t\tcase FilterType.contains:\n\t\t\t\t\tchildFilter.contains(field, filter);\n\t\t\t\t\tbreak;\n\t\t\t\tcase FilterType.startsWith:\n\t\t\t\t\tchildFilter.startsWith(field, filter);\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tthis.filter.filters.push(childFilter);\n\t\t}\n\t}\n}\n\nexport { ListViewDataSource, FilterType };\n","import { ReactElement, useContext, useMemo } from \"react\";\nimport { ReactSVG } from \"react-svg\";\n\nimport \"./style.scss\";\nimport NextIcon from \"assets/icons/chevron-right.svg\";\n\nimport { getLoginDataWithQR } from \"api/login\";\n\nimport { LoginNavigationContext, Context as LoginContext, FormContext, LoginFormContext } from \"navigation/LoginNavigator\";\nimport { RootNavigationContext, Context as RootContext } from \"navigation/RootNavigator\";\n\nimport Button from \"components/Button\";\nimport { isTablet, Orientation, useOrientation } from \"api/tabletTools\";\n\nconst WelcomeScreen = (): ReactElement => {\n\tconst loginNavigate = useContext(LoginNavigationContext) as LoginContext;\n\tconst rootNavigate = useContext(RootNavigationContext) as RootContext;\n\tconst { setMail, setOrganization, setPassword } = useContext(LoginFormContext) as FormContext;\n\n\tconst onLoginQRClick = async (): Promise<void> => {\n\t\tconst { userName, url, password } = await getLoginDataWithQR();\n\n\t\tsetMail(userName);\n\t\tsetOrganization(url);\n\t\tsetPassword(password);\n\n\t\tloginNavigate(\"login-screen\");\n\t};\n\n\tconst onLoginEmailClick = (): void => {\n\t\tloginNavigate(\"login-screen\");\n\t};\n\n\tconst onDemoDataClick = (): void => {\n\t\trootNavigate(\"main-navigator\");\n\t};\n\n\tconst orientation = useOrientation();\n\n\tconst isTabletLandscape = useMemo(() => isTablet() && orientation === Orientation.Landscape, [orientation]);\n\n\tconst thisIsHouston = useMemo(() => {\n\t\tif (isTabletLandscape) {\n\t\t\treturn (\n\t\t\t\t<h1 className=\"welcome-screen__h1 --tablet\">\n\t\t\t\t\t<span className=\"welcome-screen--text-dark\">Hello.</span>\n\t\t\t\t\t<br />\n\t\t\t\t\tThis is Houston.\n\t\t\t\t</h1>\n\t\t\t);\n\t\t}\n\n\t\treturn (\n\t\t\t<h1 className=\"welcome-screen__h1\">\n\t\t\t\t<span className=\"welcome-screen--text-dark\">Hello.</span>\n\t\t\t\t<br />\n\t\t\t\tThis is\n\t\t\t\t<br />\n\t\t\t\tHouston.\n\t\t\t</h1>\n\t\t);\n\t}, [isTabletLandscape]);\n\n\treturn (\n\t\t<div className={ `welcome-screen__container ${isTabletLandscape && \"--tablet\"}` }>\n\t\t\t<div className={ `welcome-screen__container-text ${isTabletLandscape && \"--tablet\"}` }>\n\t\t\t\t{thisIsHouston}\n\t\t\t\t<hr className=\"welcome-screen__separator\" />\n\t\t\t\t<p className=\"welcome-screen__p\">A smart app for smart workers.</p>\n\t\t\t</div>\n\t\t\t<div className={`welcome-screen__container-buttons ${isTabletLandscape && \"--tablet\"}`}>\n\t\t\t\t<Button onPress={onLoginQRClick}>Login with QR code</Button>\n\t\t\t\t<Button onPress={onLoginEmailClick}>Login with email</Button>\n\t\t\t\t<span className=\"welcome-screen__demo-data\" onClick={onDemoDataClick}>\n\t\t\t\t\tUse demo data\n\t\t\t\t\t<ReactSVG src={NextIcon} />\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default WelcomeScreen;\n","export default __webpack_public_path__ + \"static/media/chevron-left.4a82e7f7.svg\";","export default __webpack_public_path__ + \"static/media/qr-scan.162ace23.svg\";","import { ReactElement, useState } from \"react\";\nimport \"./style.scss\";\n\ntype Theme = \"light\" | \"dark\";\n\ninterface Props {\n\tvalue: string;\n\tonChange: (value: string) => void;\n\tlabel: string;\n\ttheme: Theme;\n\tmultiline?: boolean;\n\tplaceholder?: string;\n\ttype?: \"password\" | \"mail\";\n\tnoMargin?: boolean;\n\tstartCapital?: boolean;\n\tmaxLength?: number;\n}\n\nconst TextInput = ({ value, onChange, label, placeholder, type, theme, multiline, noMargin, startCapital,maxLength }: Props): ReactElement => {\n\tconst [pwdVisible, setPwdVisible] = useState(false);\n\n\tconst isPassword = type === \"password\";\n\n\tconst handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n\t\tconst { value } = e.target;\n\t\tonChange(value);\n\t};\n\n\tconst handleFocus = (): void => {\n\t\tdocument.body.style.overflow = \"hidden\";\n\t};\n\n\tconst handleFocusEnd = (): void => {\n\t\tdocument.body.style.overflow = \"initial\";\n\t};\n\n\tconst handleInput = (e: React.ChangeEvent<HTMLTextAreaElement>): void => {\n\t\tconst element = e.target;\n\t\telement.style.height = e.target.offsetHeight.toString();\n\t\telement.style.height = element.scrollHeight + 1.3 + \"px\";\n\t};\n\n\tconst handleShowClick = (): void => {\n\t\tsetPwdVisible(!pwdVisible);\n\t};\n\n\treturn (\n\t\t<div\n\t\t\tclassName={`text-input__container text-input__container${theme === \"light\" ? \"--light\" : \"--dark\"}`}\n\t\t\tstyle={noMargin ? { marginBottom: \"1.2rem\" } : {}}\n\t\t>\n\t\t\t{multiline ? (\n\t\t\t\t<textarea\n\t\t\t\t\tclassName=\"text-field\"\n\t\t\t\t\tvalue={value}\n\t\t\t\t\tplaceholder={placeholder}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tonInput={handleInput}\n\t\t\t\t\tonFocus={handleFocus}\n\t\t\t\t\tonBlur={handleFocusEnd}\n\t\t\t\t\trequired\n\t\t\t\t\tmaxLength={maxLength}\n\t\t\t\t/>\n\t\t\t) : (\n\t\t\t\t<input\n\t\t\t\t\tclassName=\"text-input\"\n\t\t\t\t\tvalue={value}\n\t\t\t\t\tplaceholder={placeholder}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tonFocus={handleFocus}\n\t\t\t\t\tonBlur={handleFocusEnd}\n\t\t\t\t\ttype={pwdVisible ? \"text\" : type}\n\t\t\t\t\tautoCapitalize={startCapital ? \"on\" : \"none\"}\n\t\t\t\t\trequired\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t<label className=\"text-input__label\">{label}</label>\n\t\t\t{isPassword && (\n\t\t\t\t<span className=\"text-input__password-button\" onClick={handleShowClick}>\n\t\t\t\t\t{pwdVisible ? \"Hide\" : \"Show\"}\n\t\t\t\t</span>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default TextInput;\n","import { ReactElement } from \"react\";\nimport \"./style.scss\";\n\ninterface Props {\n\tisActive: boolean;\n\tsetActive: (active: boolean) => void;\n}\n\nconst Switch = ({ isActive, setActive }: Props): ReactElement => {\n\tconst classList = `switch ${isActive && \"switch--active\"}`;\n\n\treturn (\n\t\t<span className={classList} onClick={() => setActive(!isActive)}>\n\t\t\t<span />\n\t\t</span>\n\t);\n};\n\nexport default Switch;\n","import { ReactElement, useCallback, useContext, useMemo, useState } from \"react\";\nimport { cssTransition, toast } from \"react-toastify\";\nimport { ReactSVG } from \"react-svg\";\n\nimport \"./style.scss\";\nimport ChevronLeftIcon from \"assets/icons/chevron-left.svg\";\nimport QRIcon from \"assets/icons/qr-scan.svg\";\n\nimport { loginUser, getLoginDataWithQR } from \"api/login\";\n\nimport { Context, FormContext, LoginFormContext, LoginNavigationContext } from \"navigation/LoginNavigator\";\n\nimport Button from \"components/Button\";\nimport TextInput from \"components/TextInput\";\nimport Switch from \"components/Switch\";\nimport { isTablet, Orientation, useOrientation } from \"api/tabletTools\";\n\nconst LoginScreen = (): ReactElement => {\n\tconst loginNavigate = useContext(LoginNavigationContext) as Context;\n\n\tconst { mail, setMail, organization, setOrganization, password, setPassword } = useContext(LoginFormContext) as FormContext;\n\tconst [savePassword, setSavePassword] = useState(true);\n\n\tconst onBackClick = (): void => {\n\t\tloginNavigate(\"welcome-screen\");\n\t};\n\n\tconst onLoginClick = (): void => {\n\t\tif (allFieldsAreFilled()) {\n\t\t\tloginUser({ userName: mail, url: organization, password: password, savePassword });\n\t\t} else {\n\t\t\tshowLoginErrorMessage();\n\t\t}\n\t};\n\n\tconst allFieldsAreFilled = (): boolean => Boolean(mail && organization && password);\n\n\tconst showLoginErrorMessage = (): void => {\n\t\tconst bounce = cssTransition({\n\t\t\tenter: \"animate__animated animate__slideInDown animate__faster\",\n\t\t\texit: \"animate__animated animate__slideOutUp animate__faster\",\n\t\t});\n\n\t\ttoast.error(\"All fields are required.\", {\n\t\t\thideProgressBar: true,\n\t\t\tautoClose: 1500,\n\t\t\tcloseButton: false,\n\t\t\ttransition: bounce,\n\t\t\tdraggable: false,\n\t\t\tclassName: \"custom-toast\",\n\t\t});\n\t\ttoast.clearWaitingQueue();\n\t};\n\n\tconst onQRClick = async (): Promise<void> => {\n\t\tconst { userName, url, password } = await getLoginDataWithQR();\n\n\t\tsetMail(userName);\n\t\tsetOrganization(url);\n\t\tsetPassword(password);\n\t};\n\n\tconst onToggleClick = useCallback((newValue: boolean): void => {\n\t\tsetSavePassword(newValue);\n\t}, []);\n\n\tconst orientation = useOrientation();\n\tconst isTabletLandscape = useMemo(() => isTablet() && orientation === Orientation.Landscape, [orientation]);\n\n\tconst renderedP = useMemo(() => {\n\t\tif (isTabletLandscape) {\n\t\t\treturn <p className=\"login-screen__p\">Enter the credentials you received via email</p>;\n\t\t}\n\n\t\treturn (\n\t\t\t<p className=\"login-screen__p\">\n\t\t\t\tEnter the credentials you <br />\n\t\t\t\treceived via email\n\t\t\t</p>\n\t\t);\n\t}, [isTabletLandscape]);\n\n\treturn (\n\t\t<div className=\"login-screen\">\n\t\t\t<div className=\"login-screen__navbar\">\n\t\t\t\t<i className=\"login-screen__icon login-screen__icon-back\" onClick={onBackClick}>\n\t\t\t\t\t<ReactSVG src={ChevronLeftIcon} />\n\t\t\t\t</i>\n\t\t\t\t<h1 className=\"login-screen__h1\">Login with email</h1>\n\t\t\t\t<i className=\"login-screen__icon login-screen__icon-qr\" onClick={onQRClick}>\n\t\t\t\t\t<ReactSVG src={QRIcon} />\n\t\t\t\t</i>\n\t\t\t</div>\n\t\t\t{renderedP}\n\t\t\t<div className={`login-screen__form-container${isTabletLandscape && \"--tablet\"}-flex`}>\n\t\t\t\t<div className={`login-screen__form-container${isTabletLandscape && \"--tablet\"}`}>\n\t\t\t\t\t<div className=\"login-screen__inputs-container\">\n\t\t\t\t\t\t<TextInput value={organization} onChange={setOrganization} label=\"Organization\" theme=\"dark\" />\n\t\t\t\t\t\t<TextInput value={mail} onChange={setMail} label=\"Your email\" type=\"mail\" theme=\"dark\" />\n\t\t\t\t\t\t<TextInput value={password} onChange={setPassword} label=\"Password\" type=\"password\" theme=\"dark\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"login-screen__save-password\">\n\t\t\t\t\t\t<p>Save password</p>\n\t\t\t\t\t\t<Switch isActive={savePassword} setActive={onToggleClick} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<Button onPress={onLoginClick}>Login</Button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default LoginScreen;\n","interface Handler {\n\tcontext: string;\n\tinvoke: () => void;\n}\n\nconst handlers: Handler[] = [];\n\nconst invokeAndroidBackHandlers = (): void => {\n\tfor (const handler of handlers) {\n\t\thandler.invoke();\n\t}\n};\n\nconst registerAndroidBackHandler = (context: string, invoke: Handler[\"invoke\"]): void => {\n\tconst handler: Handler = {\n\t\tcontext,\n\t\tinvoke,\n\t};\n\n\tconst handlerWithContextExists = handlers.find((item) => item.context === context);\n\tif (handlerWithContextExists) {\n\t\tconst handlerContextIndex = handlers.indexOf(handlerWithContextExists);\n\t\thandlers.splice(handlerContextIndex);\n\t}\n\thandlers.push(handler);\n\n\t// MobileCRM.bridge.alert(handlers.length.toString());\n};\n\nexport { invokeAndroidBackHandlers, registerAndroidBackHandler };\n","import { ReactElement, createContext, useState, useMemo, useCallback, useEffect } from \"react\";\nimport SwipeableViews from \"react-swipeable-views\";\n\nimport \"./style.scss\";\n\nimport WelcomeScreen from \"containers/WelcomeScreen\";\nimport LoginScreen from \"containers/LoginScreen\";\nimport { registerAndroidBackHandler } from \"api/androidBackClick\";\n\ntype View = \"welcome-screen\" | \"login-screen\";\nconst Views: View[] = [\"welcome-screen\", \"login-screen\"];\n\nexport type Context = (newView: View) => void;\nexport const LoginNavigationContext = createContext<Context | undefined>(undefined);\n\nexport interface FormContext {\n\tmail: string;\n\tsetMail: (mail: string) => void;\n\torganization: string;\n\tsetOrganization: (mail: string) => void;\n\tpassword: string;\n\tsetPassword: (mail: string) => void;\n}\n\nexport const LoginFormContext = createContext<FormContext | undefined>(undefined);\n\nconst LoginNavigator = (): ReactElement => {\n\tconst [view, setView] = useState<View>(\"welcome-screen\");\n\n\tconst [mail, setMail] = useState(\"\");\n\tconst [organization, setOrganization] = useState(\"\");\n\tconst [password, setPassword] = useState(\"\");\n\n\tuseEffect(() => {\n\t\tregisterAndroidBackHandler(\"login-navigator\", androidBackHandler);\n\t}, [view]);\n\n\tconst androidBackHandler = (): void => {\n\t\tif(view === \"login-screen\") {\n\t\t\tnavigate(\"welcome-screen\");\n\t\t}\n\t};\n\n\tconst navigate = useCallback((newView: View): void => {\n\t\tsetView(newView);\n\t}, []);\n\n\tconst viewNameToIndex = useMemo(() => Views.indexOf(view), [view]);\n\n\treturn (\n\t\t<LoginNavigationContext.Provider value={navigate}>\n\t\t\t<LoginFormContext.Provider value={{ mail, setMail, organization, setOrganization, password, setPassword }}>\n\t\t\t\t<SwipeableViews index={viewNameToIndex} className=\"login-navigator\" disabled>\n\t\t\t\t\t<WelcomeScreen />\n\t\t\t\t\t<LoginScreen />\n\t\t\t\t</SwipeableViews>\n\t\t\t</LoginFormContext.Provider>\n\t\t</LoginNavigationContext.Provider>\n\t);\n};\n\nexport default LoginNavigator;\n","import { HoustonServiceBridge } from \"@resconet/houston-service\";\n\nclass HoustonService extends HoustonServiceBridge {\n\tprivate static instance: HoustonService;\n\n\tpublic static getInstance(): HoustonService {\n\t\tif (!this.instance) {\n\t\t\tthis.instance = new HoustonService();\n\t\t}\n\n\t\treturn this.instance;\n\t}\n}\n\nexport default HoustonService;\n","export default __webpack_public_path__ + \"static/media/profile.00b04659.svg\";","import { waitForPassword } from \"./login\";\n\nconst MobileCRM = window.MobileCRM;\n\ninterface ProfileInfo {\n\tname: string;\n\tposition: string;\n\tid: string;\n}\n\nconst loadProfileInfoAsync = async (): Promise<ProfileInfo> => {\n\treturn await waitForPassword<Promise<ProfileInfo>>(() => {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tMobileCRM.Configuration.requestObject(\n\t\t\t\t(config) => {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tconst userId = config.settings.systemUserId;\n\t\t\t\t\t\tconst user = await MobileCRM.DynamicEntity.loadAsync(\"systemuser\", userId);\n\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\tname: user.properties.name,\n\t\t\t\t\t\t\tposition: user.properties.rh_position,\n\t\t\t\t\t\t\tid: user.properties.id,\n\t\t\t\t\t\t});\n\t\t\t\t\t})();\n\t\t\t\t},\n\t\t\t\t(error) => {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t});\n};\n\nexport { loadProfileInfoAsync };\nexport type { ProfileInfo };\n","import { waitForPassword } from \"./login\";\n\nconst MobileCRM = window.MobileCRM;\n\nconst getImageAsync = (regarding: string, title: string): Promise<string> => {\n\treturn new Promise<string>((resolve, reject) => {\n\t\tconst entity = new MobileCRM.FetchXml.Entity(\"annotation\");\n\t\tentity.addAttributes();\n\n\t\tconst mainFilter = new MobileCRM.FetchXml.Filter();\n\t\tmainFilter.type = \"and\";\n\n\t\tconst nameSubfilter = new MobileCRM.FetchXml.Filter();\n\t\tnameSubfilter.startsWith(\"subject\", title);\n\t\tmainFilter.filters.push(nameSubfilter);\n\n\t\tconst regardingSubfilter = new MobileCRM.FetchXml.Filter();\n\t\tregardingSubfilter.where(\"objectid\", \"eq\", regarding);\n\t\tmainFilter.filters.push(regardingSubfilter);\n\n\t\tentity.filter = mainFilter;\n\n\t\tconst fetch = new MobileCRM.FetchXml.Fetch(entity);\n\n\t\twaitForPassword(() => {\n\t\t\tfetch.execute(\n\t\t\t\t\"DynamicEntities\",\n\t\t\t\t(entities) => {\n\t\t\t\t\tif (entities.length > 0) {\n\t\t\t\t\t\tMobileCRM.DynamicEntity.loadDocumentBodyAsync(\"annotation\", entities[0].properties.id)\n\t\t\t\t\t\t\t.then((base64) => {\n\t\t\t\t\t\t\t\tresolve(base64);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch((e) => {\n\t\t\t\t\t\t\t\treject(e);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(\"\");\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t(error) => {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t});\n};\n\nexport default getImageAsync;\n","import { ReactElement } from \"react\";\nimport \"./style.scss\";\n\nconst LoadingWheel = (): ReactElement => {\n\treturn (\n\t\t<div className=\"loading-wheel\">\n\t\t\t<div></div>\n\t\t\t<div></div>\n\t\t\t<div></div>\n\t\t\t<div></div>\n\t\t\t<div></div>\n\t\t\t<div></div>\n\t\t\t<div></div>\n\t\t\t<div></div>\n\t\t\t<div></div>\n\t\t\t<div></div>\n\t\t\t<div></div>\n\t\t\t<div></div>\n\t\t</div>\n\t);\n};\n\nexport default LoadingWheel;\n","import { ReactElement, useEffect, useState } from \"react\";\nimport { ReactSVG } from \"react-svg\";\n\nimport \"./style.scss\";\n\nimport getImageAsync from \"api/annotationsLoader\";\nimport LoadingWheel from \"components/LoadingWheel\";\nimport HoustonService from \"api/houstonService\";\nimport { Media, MEDIA_PDF_SUFFIX } from \"@resconet/houston-service\";\nimport { FetchMethod, setZoomAnnotation, State } from \"store\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\ninterface Props {\n\tfetchMethod: FetchMethod;\n\tannotationId?: string;\n\tannotationName?: string;\n\tisThumbnail: boolean;\n\tplaceholderIcon: string | null;\n\thasFullscreenMode: boolean;\n\tonImageLoad?: () => void;\n\tstyle?: React.CSSProperties;\n}\n\ntype ImageDataState = \"loading\" | \"placeholder\" | \"image\";\n\ninterface ImageData {\n\tstate: ImageDataState;\n\tvalue: string;\n}\n\nconst AnnotationImage = ({\n\tfetchMethod,\n\tannotationId,\n\tannotationName,\n\tisThumbnail,\n\tplaceholderIcon,\n\thasFullscreenMode,\n\tonImageLoad,\n\tstyle,\n}: Props): ReactElement => {\n\tconst dispatch = useDispatch();\n\tconst imagesToSave = useSelector((state: State) => state.imagesToSave);\n\n\tconst [imageData, setImageData] = useState<ImageData>({\n\t\tstate: \"loading\",\n\t\tvalue: \"\",\n\t});\n\n\tuseEffect(() => {\n\t\tif (fetchMethod === \"byIdAndName\") {\n\t\t\tfetchByIdAndName();\n\t\t} else if (fetchMethod === \"byUniqueName\") {\n\t\t\tfetchByUniqueName();\n\t\t} else if (fetchMethod === \"byUniqueNameFromStore\") {\n\t\t\tfetchFromStore();\n\t\t}\n\t}, [annotationName, annotationId]);\n\n\tconst fetchFromStore = (): void => {\n\t\tconst image = imagesToSave.find((image) => image.imageUniqueName === annotationName);\n\n\t\tif (image) {\n\t\t\tsetImageData({\n\t\t\t\tstate: \"image\",\n\t\t\t\tvalue: image.url,\n\t\t\t});\n\t\t}\n\t};\n\n\tconst fetchByIdAndName = async (): Promise<void> => {\n\t\tif (!annotationId || !annotationName) {\n\t\t\tshowPlaceholder();\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst imageData = await getImageAsync(annotationId, annotationName);\n\t\t\tif (imageData.length) {\n\t\t\t\tshowImage(imageData);\n\t\t\t} else {\n\t\t\t\tshowPlaceholder();\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tshowPlaceholder();\n\t\t}\n\t};\n\n\tconst fetchByUniqueName = async (): Promise<void> => {\n\t\tif (!annotationName) {\n\t\t\tshowPlaceholder();\n\t\t\treturn;\n\t\t}\n\n\t\tconst houstonService = new HoustonService();\n\t\tlet image: Media;\n\n\t\ttry {\n\t\t\tif (isThumbnail) {\n\t\t\t\timage = await houstonService.loadImageThumbByImageUniqueName(annotationName);\n\t\t\t} else {\n\t\t\t\timage = await houstonService.loadImageByUniqueName(annotationName);\n\t\t\t}\n\n\t\t\tconst imageData = image.srcB64;\n\t\t\tif (imageData.length) {\n\t\t\t\tshowImage(imageData);\n\t\t\t} else {\n\t\t\t\tshowPlaceholder();\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tshowPlaceholder();\n\t\t}\n\t};\n\n\tconst showPlaceholder = (): void => {\n\t\tsetImageData({\n\t\t\tstate: \"placeholder\",\n\t\t\tvalue: \"\",\n\t\t});\n\t};\n\n\tconst showImage = (data: string): void => {\n\t\tconst dataB64 = `data:image/png;base64, ${data}`;\n\t\tsetImageData({\n\t\t\tstate: \"image\",\n\t\t\tvalue: dataB64,\n\t\t});\n\t};\n\n\tconst onImageClick = (): void => {\n\t\t// Don't allow PDF thumbnail zoom, viewer opens instead\n\t\tif (!hasFullscreenMode || annotationName?.endsWith(MEDIA_PDF_SUFFIX)) return;\n\t\tdispatch(\n\t\t\tsetZoomAnnotation({\n\t\t\t\tfetchMethod,\n\t\t\t\tannotationName: annotationName || \"\",\n\t\t\t\tannotationId: annotationId || \"\",\n\t\t\t})\n\t\t);\n\t};\n\n\tconst handleImageLoad = (): void => {\n\t\tif (!onImageLoad) return;\n\t\tonImageLoad();\n\t};\n\n\treturn (\n\t\t<div className=\"annotation-image\" onClick={onImageClick}>\n\t\t\t{/* <LoadingWheel /> */}\n\t\t\t{/* <ReactSVG className=\"annotation-image__placeholder\" src={placeholderIcon} /> */}\n\t\t\t{imageData.state === \"loading\" && <LoadingWheel />}\n\t\t\t{imageData.state === \"placeholder\" && placeholderIcon && <ReactSVG className=\"annotation-image__placeholder\" src={placeholderIcon} />}\n\t\t\t{imageData.state === \"image\" && <img style={style} alt=\"Annotation\" onLoadCapture={handleImageLoad} src={imageData.value} />}\n\t\t\t{hasFullscreenMode && <i className=\"annotation-image__icon-fullscreen\" />}\n\t\t</div>\n\t);\n};\n\nexport default AnnotationImage;\n","const MobileCRM = window.MobileCRM;\n\nconst getAppVersionAsync = (): Promise<string> => {\n\treturn new Promise((resolve, reject) => {\n\t\tMobileCRM.Configuration.requestObject(\n\t\t\t(config) => {\n\t\t\t\tresolve(config.applicationVersion);\n\t\t\t},\n\t\t\t(error) => {\n\t\t\t\treject(error);\n\t\t\t}\n\t\t);\n\t});\n};\n\nconst getNetworkInfo = (): Promise<MobileCRM.INetworkInfo> => {\n\treturn new Promise((resolve, reject) => {\n\t\tMobileCRM.Platform.getNetworkInfo(resolve, reject);\n\t});\n};\n\nexport { getAppVersionAsync, getNetworkInfo };\n","import { ForwardedRef, forwardRef, ReactElement, ReactNode, UIEvent, useContext, useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { ReactSVG } from \"react-svg\";\n\nimport \"./style.scss\";\nimport QRIcon from \"assets/icons/qr-scan.svg\";\nimport ProfileIcon from \"assets/icons/profile.svg\";\n\nimport { Context, RootNavigationContext } from \"navigation/RootNavigator\";\n\nimport HoustonService from \"api/houstonService\";\nimport { loadProfileInfoAsync } from \"api/profileLoader\";\nimport { scanQr } from \"api/scanQR\";\nimport { setSelectedEquipment, setSelectedGuide } from \"store\";\nimport AnnotationImage from \"components/AnnotationImage\";\nimport { isTablet, Orientation, useOrientation } from \"api/tabletTools\";\nimport { getNetworkInfo } from \"api/configuration\";\nimport { doSync } from \"api/synchronization\";\n\ninterface Props {\n\tchildren: ReactNode;\n\theaderElement: ReactNode;\n\textraIconElement?: ReactNode;\n\tonScrollEnd: () => void;\n\tonProfileClickCallback?: () => void;\n}\n\nlet scrollCached = 0;\n\nconst NavbarScrollWrapper = forwardRef(\n\t({ children, headerElement, extraIconElement, onScrollEnd, onProfileClickCallback }: Props, ref): ReactElement => {\n\t\tconst rootNavigate = useContext(RootNavigationContext) as Context;\n\n\t\tconst dispatch = useDispatch();\n\n\t\tconst [profileId, setProfileId] = useState<string>(\"\");\n\t\tconst [direction, setDirection] = useState(1); // 1 === \"down\" && -1 === \"up\"\n\t\tconst NavbarScrollClass = `navbar-scroll ${direction === 1 ? \"navbar-scroll--uncollapsed\" : \"\"}`;\n\n\t\tuseEffect(() => {\n\t\t\tloadProfileId();\n\t\t}, []);\n\n\t\tconst loadProfileId = async (): Promise<void> => {\n\t\t\tconst { id } = await loadProfileInfoAsync();\n\t\t\tsetProfileId(id);\n\t\t};\n\n\t\tconst handleScroll = (event: UIEvent<HTMLElement>): void => {\n\t\t\tconst target = event.target as HTMLElement;\n\t\t\tconst scroll = target.scrollTop > 0 ? target.scrollTop : 0;\n\t\t\tconst { offsetHeight, scrollHeight } = target;\n\t\t\tconst diff = 100;\n\n\t\t\tif (Math.abs(offsetHeight + scroll - scrollHeight) < diff) {\n\t\t\t\tonScrollEnd();\n\t\t\t}\n\n\t\t\tif (scroll - scrollCached > diff) {\n\t\t\t\tsetDirection(-1);\n\t\t\t\tscrollCached = scroll;\n\t\t\t} else if (scrollCached - scroll > diff) {\n\t\t\t\tsetDirection(1);\n\t\t\t\tscrollCached = scroll;\n\t\t\t}\n\t\t};\n\t\tconst orientation = useOrientation();\n\n\t\tconst onProfileClick = (): void => {\n\t\t\trootNavigate(\"profile-screen\");\n\t\t};\n\n\t\tconst onQRClick = async (): Promise<void> => {\n\t\t\tconst url = await scanQr({\n\t\t\t\tScannerTitle: \"Scan QR\",\n\t\t\t\tScannerDescription: \"Place the QR code inside the area. Scanning will start automatically.\",\n\t\t\t\tIsSquareShown: true,\n\t\t\t});\n\n\t\t\tconst [, entityName, entityId] = parseDeeplinkUrl(url);\n\t\t\tif (entityName === \"fs_asset\") {\n\t\t\t\tloadEquipment(entityId);\n\t\t\t} else if (entityName === \"rh_guide\") {\n\t\t\t\tloadGuide(entityId);\n\t\t\t}\n\t\t};\n\n\t\tconst parseDeeplinkUrl = (url: string): [string, string, string] => {\n\t\t\tconst [_, key, value] = url.split(\";\");\n\t\t\treturn [_, key, value];\n\t\t};\n\n\t\tconst resolveNotFoundData = async (nameOfNotFoundedEntity: string): Promise<void> => {\n\t\t\tconst networkInfo = await getNetworkInfo();\n\n\t\t\tif (networkInfo.connected) {\n\t\t\t\tconst messageBox = new MobileCRM.UI.MessageBox(\n\t\t\t\t\t`${nameOfNotFoundedEntity} not found. Synchronize your mobile app with the server?`,\n\t\t\t\t\t\"No\"\n\t\t\t\t);\n\t\t\t\tmessageBox.items.push(\"Sync now\");\n\t\t\t\tconst result = await messageBox.showAsync();\n\n\t\t\t\tif (result === \"Sync now\") {\n\t\t\t\t\tdoSync();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tMobileCRM.bridge.alert(`${nameOfNotFoundedEntity} not found. Syncing the app might help.`);\n\t\t\t}\n\t\t};\n\n\t\tconst loadEquipment = async (id: string): Promise<void> => {\n\t\t\tconst houstonService = new HoustonService();\n\t\t\ttry {\n\t\t\t\tconst equipmentData = await houstonService.loadEquipmentById(id);\n\t\t\t\tdispatch(setSelectedEquipment(equipmentData));\n\t\t\t} catch {\n\t\t\t\tawait resolveNotFoundData(\"Equipment\");\n\t\t\t}\n\t\t};\n\n\t\tconst loadGuide = async (id: string): Promise<void> => {\n\t\t\tconst houstonService = new HoustonService();\n\t\t\ttry {\n\t\t\t\tconst guideData = await houstonService.loadGuideById(id);\n\t\t\t\tdispatch(setSelectedGuide(guideData));\n\t\t\t} catch {\n\t\t\t\tawait resolveNotFoundData(\"Guide\");\n\t\t\t}\n\t\t};\n\n\t\tconst [isTabletLandscape, setIsTabletLandscape] = useState(false);\n\t\tuseEffect(() => {\n\t\t\tsetIsTabletLandscape(orientation === Orientation.Landscape && isTablet());\n\t\t}, [orientation]);\n\n\t\treturn (\n\t\t\t<div className={NavbarScrollClass}>\n\t\t\t\t<header ref={ref as ForwardedRef<HTMLElement>} className={`navbar ${isTabletLandscape && \"tablet\"}`}>\n\t\t\t\t\t<section className=\"navbar__flexbox\">\n\t\t\t\t\t\t<div className=\"navbar__group\">\n\t\t\t\t\t\t\t<i className=\"navbar__icon navbar__icon-profile\" onClick={onProfileClick} data-test=\"ProfileIcon\">\n\t\t\t\t\t\t\t\t<i className=\"navbar__icon-wrapper\">\n\t\t\t\t\t\t\t\t\t<AnnotationImage\n\t\t\t\t\t\t\t\t\t\tfetchMethod=\"byIdAndName\"\n\t\t\t\t\t\t\t\t\t\tannotationId={profileId}\n\t\t\t\t\t\t\t\t\t\tannotationName=\"UserImage\"\n\t\t\t\t\t\t\t\t\t\tisThumbnail={true}\n\t\t\t\t\t\t\t\t\t\tplaceholderIcon={ProfileIcon}\n\t\t\t\t\t\t\t\t\t\thasFullscreenMode={false}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</i>\n\t\t\t\t\t\t\t</i>\n\t\t\t\t\t\t\t<h1 className=\"navbar__h1\">{headerElement}</h1>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{extraIconElement}\n\t\t\t\t\t\t<i className=\"navbar__icon navbar__icon-qr\" onClick={onQRClick} data-test=\"ScanBarcodeButton\">\n\t\t\t\t\t\t\t<ReactSVG src={QRIcon} />\n\t\t\t\t\t\t</i>\n\t\t\t\t\t</section>\n\t\t\t\t</header>\n\t\t\t\t<main className={`scroll-view ${isTabletLandscape && \"tablet\"}`} onScroll={handleScroll}>\n\t\t\t\t\t{children}\n\t\t\t\t</main>\n\t\t\t</div>\n\t\t);\n\t}\n);\n\nexport default NavbarScrollWrapper;\n","export default __webpack_public_path__ + \"static/media/search.f50f0d7b.svg\";","export default __webpack_public_path__ + \"static/media/List-2.522a59e0.svg\";","export default __webpack_public_path__ + \"static/media/List-3.d3d3a384.svg\";","import {\n\tChangeEvent,\n\tForwardedRef,\n\tforwardRef,\n\tReactElement,\n\tReactNode,\n\tuseCallback,\n\tuseEffect,\n\tuseImperativeHandle,\n\tuseMemo,\n\tuseState,\n} from \"react\";\nimport { ReactSVG } from \"react-svg\";\n\nimport \"./style.scss\";\n\nimport SearchIcon from \"assets/icons/search.svg\";\nimport GridIcon from \"assets/icons/List-2.svg\";\nimport ListIcon from \"assets/icons/List-3.svg\";\nimport { loadProfileInfoAsync } from \"api/profileLoader\";\nimport { isTablet } from \"api/tabletTools\";\nimport { AppListSource } from \"@resconet/houston-service/dist/esm/lib/types/listSource\";\n\nexport interface ListItemParams {\n\tid: string;\n\tsmall?: boolean;\n\tonClick: (id: string, name?: string) => void;\n}\n\ninterface Props {\n\tDataSource: AppListSource;\n\tListItem: React.FC<ListItemParams>;\n\tGridItem?: React.FC<ListItemParams>;\n\tsearchPlaceholder: string;\n\tonItemClick: (itemId: string, name?: string) => void;\n\tsmall?: boolean;\n}\n\nexport interface ForwardedObject {\n\tloadNextEntities: () => void;\n}\n\ntype Entity = Record<string, unknown>;\n\nlet nextEntitiesLength = 0;\n\nconst EntitiesList = forwardRef(\n\t(\n\t\t{ DataSource, ListItem, searchPlaceholder, onItemClick, small, GridItem }: Props,\n\t\tref: ForwardedRef<ForwardedObject | undefined>\n\t): ReactElement => {\n\t\tconst [entities, setEntities] = useState<Entity[]>([]);\n\n\t\tconst [isGrid, setIsGrid] = useState(false);\n\n\t\tconst onSwitchHandler = (): void => {\n\t\t\tsetIsGrid(!isGrid);\n\t\t};\n\n\t\tuseImperativeHandle(ref, () => ({\n\t\t\tloadNextEntities,\n\t\t}));\n\n\t\tuseEffect(() => {\n\t\t\tloadInitialEntities();\n\t\t}, [DataSource]);\n\n\t\tuseEffect(() => {\n\t\t\tif (nextEntitiesLength > 0 && entities.length < 10) {\n\t\t\t\tloadNextEntities();\n\t\t\t}\n\t\t}, [entities]);\n\n\t\tconst loadInitialEntities = (): void => {\n\t\t\tloadNextEntities(true);\n\t\t};\n\n\t\tconst loadNextEntities = async (initial?: boolean, repetitive?: boolean): Promise<void> => {\n\t\t\tconst nextPageEntities = await DataSource.getNextPage();\n\n\t\t\tif (initial && !nextPageEntities.length) {\n\t\t\t\tsetEntities([]);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tnextEntitiesLength = nextPageEntities.length;\n\n\t\t\tconst filteredNextPageEntities = await filterEntities(nextPageEntities);\n\t\t\tif (initial) {\n\t\t\t\tsetEntities(filteredNextPageEntities);\n\t\t\t} else {\n\t\t\t\tsetEntities([...entities, ...filteredNextPageEntities]);\n\t\t\t}\n\t\t};\n\n\t\tconst filterEntities = async (unfilteredEntities: Entity[]): Promise<Entity[]> => {\n\t\t\tif (unfilteredEntities[0]?.entityName === \"systemuser\") {\n\t\t\t\tconst profile = await loadProfileInfoAsync();\n\t\t\t\tconst filteredEntities = unfilteredEntities.filter((entity) => entity.id !== profile.id);\n\t\t\t\treturn filteredEntities;\n\t\t\t} else if (unfilteredEntities[0]?.entityName === \"rh_guide\") {\n\t\t\t\tconst filteredEntities = unfilteredEntities.filter(\n\t\t\t\t\t(entity) => entity.statuscode === 473220002 || entity.statusReason === \"published\"\n\t\t\t\t); //code for \"published\" statuscode\n\t\t\t\treturn filteredEntities;\n\t\t\t}\n\t\t\treturn unfilteredEntities;\n\t\t};\n\n\t\tconst renderedEntities = useMemo((): ReactNode => {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t{entities.length ? (\n\t\t\t\t\t\tentities.map((entity, i) => {\n\t\t\t\t\t\t\tconst id = entity.id as string;\n\t\t\t\t\t\t\tif (GridItem && isGrid) return <GridItem key={id || i} id={id} onClick={onItemClick} {...entity} small={small} />;\n\t\t\t\t\t\t\telse return <ListItem key={id || i} id={id} onClick={onItemClick} {...entity} small={small} />;\n\t\t\t\t\t\t})\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<span className=\"list-view__items-placeholder\">No items found</span>\n\t\t\t\t\t)}\n\t\t\t\t</>\n\t\t\t);\n\t\t}, [entities, small, isGrid]);\n\n\t\tconst handleSearch = useCallback(\n\t\t\tasync (e: ChangeEvent<HTMLInputElement>): Promise<void> => {\n\t\t\t\tconst filter = e.target.value;\n\n\t\t\t\tDataSource.setFilter(filter);\n\t\t\t\tconst filteredEntities = await DataSource.getNextPage();\n\t\t\t\tsetEntities(filteredEntities);\n\t\t\t},\n\t\t\t[DataSource]\n\t\t);\n\n\t\treturn (\n\t\t\t<div className=\"list-view\">\n\t\t\t\t<div className=\"list-view__search-box\">\n\t\t\t\t\t<i className=\"list-view__icon-search\">\n\t\t\t\t\t\t<ReactSVG src={SearchIcon} />\n\t\t\t\t\t</i>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclassName=\"list-view__search-input\"\n\t\t\t\t\t\tplaceholder={searchPlaceholder}\n\t\t\t\t\t\tonInput={handleSearch}\n\t\t\t\t\t\tdata-test=\"SearchBar\"\n\t\t\t\t\t/>\n\t\t\t\t\t{isTablet() && GridItem && (\n\t\t\t\t\t\t<i className=\"list-view__icon-grid-switch\" onClick={onSwitchHandler}>\n\t\t\t\t\t\t\t<ReactSVG src={isGrid ? ListIcon : GridIcon} />\n\t\t\t\t\t\t</i>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t\t<div className={`list-view__${isGrid ? \"grid\" : \"list\"}`}>{renderedEntities}</div>\n\t\t\t</div>\n\t\t);\n\t}\n);\n\nexport default EntitiesList;\n","export default __webpack_public_path__ + \"static/media/cpu.992cfbfc.svg\";","export default __webpack_public_path__ + \"static/media/arrow-right.2ded7106.svg\";","import { ReactElement } from \"react\";\nimport { ReactSVG } from \"react-svg\";\n\nimport \"./style.scss\";\n\nimport CPUIcon from \"assets/icons/cpu.svg\";\nimport ArrowRightIcon from \"assets/icons/arrow-right.svg\";\nimport { ListItemParams } from \"components/EntitiesList\";\nimport AnnotationImage from \"components/AnnotationImage\";\n\ninterface Props extends ListItemParams {\n\tname?: string;\n\tserialnumber?: string;\n}\n\nconst EquipmentListItem = ({ name, serialnumber, id, onClick }: Props): ReactElement => {\n\treturn (\n\t\t<div className=\"equipment-list-item\" onClick={() => onClick(id)}>\n\t\t\t<i className=\"equipment-list-item__image\">\n\t\t\t\t<AnnotationImage\n\t\t\t\t\tfetchMethod=\"byIdAndName\"\n\t\t\t\t\tannotationId={id}\n\t\t\t\t\tannotationName=\"EquipmentImage\"\n\t\t\t\t\tisThumbnail={true}\n\t\t\t\t\tplaceholderIcon={CPUIcon}\n\t\t\t\t\thasFullscreenMode={false}\n\t\t\t\t/>\n\t\t\t</i>\n\t\t\t<div className=\"equipment-list-item__info\">\n\t\t\t\t<h3 className=\"equipment-list-item__name\">{name}</h3>\n\t\t\t\t<h4 className=\"equipment-list-item__serialnumber\">{serialnumber}</h4>\n\t\t\t</div>\n\t\t\t<i className=\"equipment-list-item__icon-next\">\n\t\t\t\t<ReactSVG src={ArrowRightIcon} />\n\t\t\t</i>\n\t\t</div>\n\t);\n};\n\nexport default EquipmentListItem;\n","import { ReactElement, useEffect, useState } from \"react\";\n\nimport \"./style.scss\";\n\nimport CPUIcon from \"assets/icons/cpu.svg\";\nimport { ListItemParams } from \"components/EntitiesList\";\nimport AnnotationImage from \"components/AnnotationImage\";\n\ninterface Props extends ListItemParams {\n\tname?: string;\n\tserialnumber?: string;\n\tsmall?: boolean;\n}\n\nconst EquipmentGridItem = ({ name, serialnumber, id, onClick, small }: Props): ReactElement => {\n\n\treturn (\n\t\t<div className={`equipment-grid-item__wrapper ${small && \"small\"}`}>\n\t\t\t<div className=\"equipment-grid-item\" onClick={() => onClick(id)}>\n\t\t\t\t<i className=\"equipment-grid-item__image\">\n\t\t\t\t\t<AnnotationImage\n\t\t\t\t\t\tfetchMethod=\"byIdAndName\"\n\t\t\t\t\t\tannotationId={id}\n\t\t\t\t\t\tannotationName=\"EquipmentImage\"\n\t\t\t\t\t\tisThumbnail={true}\n\t\t\t\t\t\tplaceholderIcon={CPUIcon}\n\t\t\t\t\t\thasFullscreenMode={false}\n\t\t\t\t\t/>\n\t\t\t\t</i>\n\t\t\t\t<div className=\"equipment-grid-item__info-wrapper\">\n\t\t\t\t\t<div className=\"equipment-grid-item__info\">\n\t\t\t\t\t\t<h4 className=\"equipment-grid-item__serialnumber\">{serialnumber}</h4>\n\t\t\t\t\t\t<h3 className=\"equipment-grid-item__name\">{name}</h3>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default EquipmentGridItem;\n","import React, { ReactElement, ReactNode, useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { setSelectedEquipment } from \"store\";\n\nimport { FilterType, ListViewDataSource } from \"api/listSource\";\nimport HoustonService from \"api/houstonService\";\n\nimport NavbarScrollWrapper from \"containers/NavbarScrollWrapper\";\nimport EntitiesList from \"components/EntitiesList\";\nimport EquipmentListItem from \"components/EquipmentListItem\";\nimport EquipmentGridItem from \"components/EquipmentGridItem\";\nimport { useResizeDetector } from \"react-resize-detector\";\n\ninterface ListDataSource {\n\tloadNextEntities: () => void;\n}\n\ninterface Props {\n\tonProfileClickCallback?: () => void;\n}\n\nconst EquipmentList = ({ onProfileClickCallback }: Props): ReactElement => {\n\tconst DataSource = useMemo(\n\t\t() =>\n\t\t\tnew ListViewDataSource(\n\t\t\t\t\"fs_asset\",\n\t\t\t\t[\"name\", \"serialnumber\", \"id\", \"rh_installedby\", \"rh_identifier\", \"rh_description\"],\n\t\t\t\t10,\n\t\t\t\t[\"name\"],\n\t\t\t\tnull,\n\t\t\t\tFilterType.contains\n\t\t\t),\n\t\t[]\n\t);\n\n\tconst dispatch = useDispatch();\n\tconst entitiesListRef = useRef<ListDataSource>();\n\n\tconst handleScrollEnd = useCallback((): void => {\n\t\tif (!entitiesListRef.current) return;\n\t\tentitiesListRef.current.loadNextEntities();\n\t}, [entitiesListRef]);\n\n\tconst handleItemClick = useCallback(async (id: string): Promise<void> => {\n\t\tconst houstonService = new HoustonService();\n\n\t\tconst equipmentData = await houstonService.loadEquipmentById(id);\n\t\tif (!equipmentData) return;\n\n\t\tdispatch(setSelectedEquipment(equipmentData));\n\t}, []);\n\n\tconst { width, ref } = useResizeDetector();\n\tconst [small, setSmall] = useState(false);\n\n\tuseEffect(() => {\n\t\tif (width && width < 700) {\n\t\t\tsetSmall(true);\n\t\t} else {\n\t\t\tsetSmall(false);\n\t\t}\n\t}, [width]);\n\n\treturn (\n\t\t<NavbarScrollWrapper headerElement={<>Equipment</>} onScrollEnd={handleScrollEnd} onProfileClickCallback={onProfileClickCallback} ref={ref}>\n\t\t\t<EntitiesList\n\t\t\t\tDataSource={DataSource}\n\t\t\t\tListItem={EquipmentListItem}\n\t\t\t\tGridItem={EquipmentGridItem}\n\t\t\t\tref={entitiesListRef}\n\t\t\t\tonItemClick={handleItemClick}\n\t\t\t\tsearchPlaceholder=\"Find a product\"\n\t\t\t\tsmall={small}\n\t\t\t/>\n\t\t</NavbarScrollWrapper>\n\t);\n};\n\nexport default React.memo(EquipmentList);\n","export default __webpack_public_path__ + \"static/media/plus.c2c2df71.svg\";","export default __webpack_public_path__ + \"static/media/guide.32b02986.svg\";","import { waitForPassword } from \"./login\";\n\nconst MobileCRM = window.MobileCRM;\n\nconst loadSingleProperty = async (id: string, entityName: string, fieldName: string): Promise<string> => {\n\treturn await waitForPassword<Promise<string>>(\n\t\tasync (): Promise<string> => {\n\t\t\treturn (await MobileCRM.DynamicEntity.loadAsync(entityName, id)).properties[fieldName];\n\t\t}\n\t);\n};\n\nexport { loadSingleProperty };\n","import { ReactElement, useContext, useEffect, useState } from \"react\";\nimport \"./style.scss\";\n\nimport GuideIcon from \"assets/icons/guide.svg\";\n\nimport { Guide } from \"@resconet/houston-service\";\nimport HoustonService from \"api/houstonService\";\nimport { ListItemParams } from \"components/EntitiesList\";\nimport { loadSingleProperty } from \"api/singlePropertyLoader\";\nimport AnnotationImage from \"components/AnnotationImage\";\n\ninterface Props extends ListItemParams {\n\trh_guideid?: string;\n\trh_name?: string;\n\trh_annotationsubject?: string;\n}\n\ninterface GuideExtended extends Guide {\n\tguideCategory: string;\n}\n\nconst GuideListItemComponent = ({ rh_name, rh_annotationsubject, id, rh_guideid, onClick }: Props): ReactElement => {\n\tconst [guideData, setGuideData] = useState<GuideExtended | null>(null);\n\tconst stepsLength = guideData?.steps?.length || 0;\n\n\tuseEffect(() => {\n\t\tloadGuideData();\n\t}, [rh_guideid]);\n\n\tconst loadGuideData = async (): Promise<void> => {\n\t\tif (!rh_guideid) return;\n\n\t\tconst houstonService = new HoustonService();\n\t\tconst data = await houstonService.loadGuideById(rh_guideid);\n\t\ttry {\n\t\t\tconst guideCategory = (await loadSingleProperty(data.categoryId || \"\", \"rh_guidecategory\", \"rh_name\")) || \"\";\n\t\t\tsetGuideData({\n\t\t\t\t...data,\n\t\t\t\tguideCategory: guideCategory || \"\",\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tsetGuideData({\n\t\t\t\t...data,\n\t\t\t\tguideCategory: \"\",\n\t\t\t});\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className=\"guide-list-item\" onClick={() => onClick(rh_guideid || \"\")}>\n\t\t\t<i className=\"guide-list-item__image\">\n\t\t\t\t<AnnotationImage\n\t\t\t\t\tfetchMethod=\"byUniqueName\"\n\t\t\t\t\tannotationName={rh_annotationsubject}\n\t\t\t\t\tisThumbnail={true}\n\t\t\t\t\tplaceholderIcon={GuideIcon}\n\t\t\t\t\thasFullscreenMode={false}\n\t\t\t\t/>\n\t\t\t</i>\n\t\t\t<div className=\"guide-list-item__info\">\n\t\t\t\t<h4 className=\"guide-list-item__type\">{guideData?.guideCategory}</h4>\n\t\t\t\t<h3 className=\"guide-list-item__name\">{rh_name}</h3>\n\t\t\t\t<span className=\"guide-list-item__steps\">{`${stepsLength || \"0\"} ${stepsLength > 1 ? \"Steps\" : \"Step\"}`}</span>\n\t\t\t</div>\n\t\t\t<i className=\"guide-list-item__icon-next\" />\n\t\t</div>\n\t);\n};\n\nexport default GuideListItemComponent;\n","export default __webpack_public_path__ + \"static/media/up-down.bad9cb20.svg\";","import { ChangeEvent, ReactElement } from \"react\";\nimport { ReactSVG } from \"react-svg\";\n\nimport \"./style.scss\";\nimport UpDownIcon from \"assets/icons/up-down.svg\";\n\ninterface SelectItem {\n\tid: string;\n\tname: string;\n}\n\ninterface Props {\n\theader: string;\n\titems: SelectItem[];\n\tselectedItem: SelectItem | \"All\";\n\tsetSelectedItem: (item: SelectItem | \"All\") => void;\n}\n\nconst NavbarSelect = ({ header, items, selectedItem, setSelectedItem }: Props): ReactElement => {\n\tconst onSelectChange = (event: ChangeEvent<HTMLSelectElement>): void => {\n\t\tconst selectEl = event.target;\n\t\tconst newValue = selectEl.value;\n\n\t\tif (newValue === \"All\") {\n\t\t\tsetSelectedItem(\"All\");\n\t\t\treturn;\n\t\t}\n\n\t\tconst newItem = findItemByValue(newValue);\n\t\tif (newItem) {\n\t\t\tsetSelectedItem(newItem);\n\t\t}\n\t};\n\n\tconst findItemByValue = (value: string): SelectItem | null => {\n\t\treturn items.find((i) => i.name === value) || null;\n\t};\n\n\tconst renderedSelectedItem = (): string => {\n\t\tif (selectedItem === \"All\" || typeof selectedItem === \"string\") {\n\t\t\treturn selectedItem;\n\t\t} else {\n\t\t\treturn selectedItem.name;\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className=\"navbar-select\">\n\t\t\t<h2 className=\"navbar-select__header\">{header}</h2>\n\t\t\t<select onChange={onSelectChange}>\n\t\t\t\t<option value=\"All\">All</option>\n\t\t\t\t{items.map((i) => (\n\t\t\t\t\t<option value={i.name}>{i.name}</option>\n\t\t\t\t))}\n\t\t\t</select>\n\t\t\t<span className=\"navbar-select-wrapper\">\n\t\t\t\t<div className=\"navbar-select__group\">\n\t\t\t\t\t{renderedSelectedItem()}\n\t\t\t\t</div>\n\t\t\t\t<i className=\"navbar-select__icon-up-down\">\n\t\t\t\t\t<ReactSVG src={UpDownIcon} />\n\t\t\t\t</i>\n\t\t\t</span>\n\t\t</div>\n\t);\n};\n\nexport default NavbarSelect;\n","import { ReactElement, useCallback, useContext, useEffect, useMemo, useRef, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport \"./style.scss\";\nimport PlusIcon from \"assets/icons/plus.svg\";\n\nimport { FilterType, ListViewDataSource } from \"api/listSource\";\nimport HoustonService from \"api/houstonService\";\n\nimport { setSelectedGuide } from \"store\";\n\nimport NavbarScrollWrapper from \"containers/NavbarScrollWrapper\";\nimport GuideListItem from \"components/GuideListItem\";\nimport EntitiesList from \"components/EntitiesList\";\nimport { Category } from \"@resconet/houston-service\";\nimport NavbarSelect from \"components/NavbarSelect\";\nimport { ReactSVG } from \"react-svg\";\nimport { Context, MainNavigationContext } from \"navigation/MainNavigator\";\nimport { isTablet, Orientation, useOrientation } from \"api/tabletTools\";\n\ninterface ListDataSource {\n\tloadNextEntities: () => void;\n}\n\ninterface Props {\n\tonProfileClickCallback?: () => void;\n\tonPlusClickCallback: () => void;\n}\n\nconst LibraryScreen = ({ onProfileClickCallback, onPlusClickCallback }: Props): ReactElement => {\n\tconst [categories, setCategories] = useState<Category[]>([]);\n\tconst [selectedCategory, setSelectedCategory] = useState<Category | \"All\">(\"All\");\n\n\tconst mainNavigate = useContext(MainNavigationContext) as Context;\n\n\tconst dispatch = useDispatch();\n\tconst entitiesListRef = useRef<ListDataSource>();\n\n\tconst DataSource = useMemo(\n\t\t() =>\n\t\t\tnew ListViewDataSource(\n\t\t\t\t\"rh_guide\",\n\t\t\t\t[\"rh_guideid\", \"rh_name\", \"rh_annotationsubject\", \"statuscode\"],\n\t\t\t\t10,\n\t\t\t\t[\"rh_name\"],\n\t\t\t\tselectedCategory === \"All\"\n\t\t\t\t\t? null\n\t\t\t\t\t: {\n\t\t\t\t\t\tnToNEntityName: \"rh_guidecategory\",\n\t\t\t\t\t\tnToNfield: \"rh_guidecategoryid\",\n\t\t\t\t\t\tnToNIDField: \"rh_guidecategoryid\",\n\t\t\t\t\t\ttargetId: selectedCategory.id,\n\t\t\t\t\t\tlinkFilter: \"rh_guidecategoryid\",\n\t\t\t\t\t},\n\t\t\t\tFilterType.contains\n\t\t\t),\n\t\t[selectedCategory]\n\t);\n\n\tuseEffect(() => {\n\t\tloadCategories();\n\t}, []);\n\n\tconst loadCategories = async (): Promise<void> => {\n\t\tconst houstonService = new HoustonService();\n\t\tconst loadedCategories = await houstonService.loadAllCategories();\n\t\tsetCategories(loadedCategories);\n\t};\n\n\tconst handleScrollEnd = useCallback((): void => {\n\t\tif (!entitiesListRef.current) return;\n\t\tentitiesListRef.current.loadNextEntities();\n\t}, []);\n\n\tconst handleItemClick = useCallback(async (id: string): Promise<void> => {\n\t\tconst houstonService = new HoustonService();\n\n\t\tconst guideData = await houstonService.loadGuideById(id);\n\t\tif (!guideData) return;\n\n\t\tdispatch(setSelectedGuide(guideData));\n\t}, []);\n\n\tconst orientation = useOrientation();\n\n\tconst onPlusClick = (): void => {\n\t\tif (isTablet() && orientation === Orientation.Landscape) {\n\t\t\tonPlusClickCallback();\n\t\t} else {\n\t\t\tmainNavigate(\"fullscreen-modal-toggle\");\n\t\t}\n\t};\n\n\treturn (\n\t\t<NavbarScrollWrapper\n\t\t\theaderElement={<NavbarSelect header=\"Library\" items={categories} selectedItem={selectedCategory} setSelectedItem={setSelectedCategory} />}\n\t\t\textraIconElement={\n\t\t\t\t<i className=\"navbar__icon navbar__icon-plus\" onClick={onPlusClick} data-test=\"AddNewButton\">\n\t\t\t\t\t<ReactSVG src={PlusIcon} />\n\t\t\t\t</i>\n\t\t\t}\n\t\t\tonScrollEnd={handleScrollEnd}\n\t\t\tonProfileClickCallback={onProfileClickCallback}\n\t\t>\n\t\t\t<EntitiesList\n\t\t\t\tDataSource={DataSource}\n\t\t\t\tListItem={GuideListItem}\n\t\t\t\tref={entitiesListRef}\n\t\t\t\tonItemClick={handleItemClick}\n\t\t\t\tsearchPlaceholder=\"Find a guide\"\n\t\t\t/>\n\t\t</NavbarScrollWrapper>\n\t);\n};\n\nexport default LibraryScreen;\n","export default __webpack_public_path__ + \"static/media/call.b40e1a4b.svg\";","import { ReactElement } from \"react\";\nimport { ReactSVG } from \"react-svg\";\n\nimport \"./style.scss\";\n\nimport CallIcon from \"assets/icons/call.svg\";\nimport ProfileIcon from \"assets/icons/profile.svg\";\n\nimport { ListItemParams } from \"components/EntitiesList\";\nimport AnnotationImage from \"components/AnnotationImage\";\n\ninterface Props extends ListItemParams {\n\tname?: string;\n\trh_position?: string;\n}\n\nconst ExpertListItem = ({ rh_position, name, id, onClick }: Props): ReactElement => {\n\treturn (\n\t\t<div className=\"user-list-item\" onClick={() => onClick(id, name)}>\n\t\t\t<i className=\"user-list-item__profile-image\">\n\t\t\t\t<AnnotationImage\n\t\t\t\t\tfetchMethod=\"byIdAndName\"\n\t\t\t\t\tannotationId={id}\n\t\t\t\t\tannotationName=\"UserImage\"\n\t\t\t\t\tisThumbnail={true}\n\t\t\t\t\tplaceholderIcon={ProfileIcon}\n\t\t\t\t\thasFullscreenMode={false}\n\t\t\t\t/>\n\t\t\t</i>\n\t\t\t<h3 className=\"user-list-item__name\">{name}</h3>\n\t\t\t<div className=\"user-list-item__state-container\">{rh_position && <span className=\"user-list-item__state\">{rh_position}</span>}</div>\n\t\t\t<i className=\"user-list-item__icon-call\" data-test=\"CallButton\">\n\t\t\t\t<ReactSVG src={CallIcon} />\n\t\t\t</i>\n\t\t</div>\n\t);\n};\n\nexport default ExpertListItem;\n","const MobileCRM = window.MobileCRM;\n\nconst makeCall = (userId: string, userPrimaryName: string): void => {\n\tMobileCRM.bridge.invokeMethodAsync(\"HomeForm\", \"InitiateHoustonCall\", [new MobileCRM.Reference(\"systemuser\", userId, userPrimaryName), false]);\n};\n\nexport default makeCall;","import makeCall from \"api/calls\";\n\nconst initiateUserCall = async (userId: string, userName: string): Promise<void> => {\n\tif (!userId || !userName) return;\n\n\tconst shouldCall = await askUserToCall(userName);\n\tif (shouldCall) makeCall(userId, userName);\n};\n\nconst askUserToCall = async (name: string): Promise<boolean> => {\n\tconst messageBox = new MobileCRM.UI.MessageBox(`Call ${name}?`);\n\tmessageBox.items = [\"Yes\", \"No\"];\n\n\tconst response = await messageBox.showAsync();\n\tif (response === \"Yes\") return true;\n\treturn false;\n};\n\nexport default initiateUserCall;\n","import React, { ReactElement, useCallback, useMemo, useRef } from \"react\";\n\nimport { ListViewDataSource } from \"api/listSource\";\n\nimport NavbarScrollWrapper from \"containers/NavbarScrollWrapper\";\nimport EntitiesList, { ForwardedObject } from \"components/EntitiesList\";\nimport ExpertListItem from \"components/ExpertListItem\";\nimport initiateUserCall from \"api/initiateUserCall\";\n\ninterface Props {\n\tonProfileClickCallback?: () => void;\n}\n\nconst ExpertsList = ({ onProfileClickCallback }: Props): ReactElement => {\n\tconst DataSource = useMemo(\n\t\t() =>\n\t\t\tnew ListViewDataSource(\"systemuser\", [\"name\", \"rh_position\", \"id\"], 10, [\"name\", \"lastname\", \"firstname\"], {\n\t\t\t\tnToNEntityName: \"systemuser_role\",\n\t\t\t\tnToNfield: \"systemuserid\",\n\t\t\t\tnToNIDField: \"id\",\n\t\t\t\ttargetId: \"a32f9ad4-3952-4600-8fa3-594b1587acd6\",\n\t\t\t\tlinkFilter: \"roleid\",\n\t\t\t}),\n\t\t[]\n\t);\n\tconst entitiesListRef = useRef<ForwardedObject>();\n\n\tconst handleScrollEnd = useCallback((): void => {\n\t\tif (!entitiesListRef.current) return;\n\t\tentitiesListRef.current.loadNextEntities();\n\t}, [entitiesListRef]);\n\n\tconst handleItemClick = useCallback(async (id: string, name?: string): Promise<void> => {\n\t\tinitiateUserCall(id, name || \"Unknown user\");\n\t}, []);\n\n\treturn (\n\t\t<NavbarScrollWrapper headerElement={<>Experts</>} onScrollEnd={handleScrollEnd} onProfileClickCallback={onProfileClickCallback}>\n\t\t\t<EntitiesList\n\t\t\t\tDataSource={DataSource}\n\t\t\t\tListItem={ExpertListItem}\n\t\t\t\tref={entitiesListRef}\n\t\t\t\tonItemClick={handleItemClick}\n\t\t\t\tsearchPlaceholder=\"Find an expert\"\n\t\t\t/>\n\t\t</NavbarScrollWrapper>\n\t);\n};\n\nexport default React.memo(ExpertsList);\n","export default __webpack_public_path__ + \"static/media/page.53e27269.svg\";","import { ReactElement } from \"react\";\nimport { ReactSVG } from \"react-svg\";\n\nimport \"./style.scss\";\n\nimport IconCpu from \"assets/icons/cpu.svg\";\nimport IconCall from \"assets/icons/call.svg\";\nimport IconPage from \"assets/icons/page.svg\";\n\nimport { View } from \"navigation/TabBarNavigator\";\n\ninterface Props {\n\tview: number;\n\tnavigateTabBar: (view: View) => void;\n\tuseTabletUI: boolean;\n}\n\nconst TabBar = ({ view, navigateTabBar, useTabletUI }: Props): ReactElement => {\n\tconst swiperClassList = `tabbar__swiper tabbar__swiper--pos-${view}`;\n\tconst iconCpuClassList = `tabbar__icon ${useTabletUI && \"tablet\"} ${view === 0 && \"tabbar__icon--selected\"}`;\n\tconst iconPageClassList = `tabbar__icon ${useTabletUI && \"tablet\"} ${view === 1 && \"tabbar__icon--selected\"}`;\n\tconst iconCallClassList = `tabbar__icon ${useTabletUI && \"tablet\"} ${view === 2 && \"tabbar__icon--selected\"}`;\n\n\tconst handleCpuClick = (): void => {\n\t\tnavigateTabBar(\"equipment-list\");\n\t};\n\n\tconst handlePageClick = (): void => {\n\t\tnavigateTabBar(\"library-screen\");\n\t};\n\n\tconst handleCallClick = (): void => {\n\t\tnavigateTabBar(\"calls-list\");\n\t};\n\n\treturn (\n\t\t<div className={`tabbar ${useTabletUI && \"tablet\"}`}>\n\t\t\t{useTabletUI || <div className={swiperClassList}></div>}\n\t\t\t<i className={iconCpuClassList} onClick={handleCpuClick} data-test=\"Equipment-Button\">\n\t\t\t\t<ReactSVG src={IconCpu} />\n\t\t\t</i>\n\t\t\t<i className={iconPageClassList} onClick={handlePageClick} data-test=\"Libary-button\">\n\t\t\t\t<ReactSVG src={IconPage} />\n\t\t\t</i>\n\t\t\t<i className={iconCallClassList} onClick={handleCallClick} data-test=\"Experts-button\">\n\t\t\t\t<ReactSVG src={IconCall} />\n\t\t\t</i>\n\t\t</div>\n\t);\n};\n\nexport default TabBar;\n","export default __webpack_public_path__ + \"static/media/arrow.75ea426f.svg\";","import React, { ReactElement, UIEvent, useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { ReactSVG } from \"react-svg\";\n\nimport \"./style.scss\";\nimport ChevronLeftIcon from \"assets/icons/chevron-left.svg\";\nimport CPUIcon from \"assets/icons/cpu.svg\";\nimport LinkArrow from \"assets/icons/arrow.svg\";\n\nimport { setSelectedEquipment, setSelectedGuide } from \"store\";\n\nimport initiateUserCall from \"api/initiateUserCall\";\nimport { loadSingleProperty } from \"api/singlePropertyLoader\";\nimport { loadProfileInfoAsync } from \"api/profileLoader\";\n\nimport { Context as MainContext, MainNavigationContext } from \"navigation/MainNavigator\";\nimport { EquipmentNavigationContext, Context as EquipmentContext } from \"navigation/EquipmentNavigator\";\n\nimport GuideListItemComponent from \"components/GuideListItem\";\nimport ExpertListItem from \"components/ExpertListItem\";\nimport HoustonService from \"api/houstonService\";\nimport AnnotationImage from \"components/AnnotationImage\";\nimport { User, GuideListItem } from \"@resconet/houston-service\";\n\nexport interface EquipmentOrModelFormSource {\n\tid?: string;\n\tname?: string;\n\tinventoryIdentifier?: string;\n\tinstalledBy?: string;\n\tdescription?: string;\n\tserialNumber?: string;\n\tmodelId?: string;\n\tusers?: User[];\n\tguideList?: GuideListItem[];\n\tmoreUsers: boolean;\n\tmoreGuides: boolean;\n\tisModel?: boolean;\n}\n\ninterface Props {\n\tonEquipmentSet?: () => void;\n\tonBackClick?: () => void;\n\tsource: EquipmentOrModelFormSource;\n\tonModelClick?: (modelId: string) => void;\n}\n\nconst EquipmentDetail = ({ onEquipmentSet, onBackClick, source, onModelClick }: Props): ReactElement => {\n\tconst mainNavigate = useContext(MainNavigationContext) as MainContext;\n\tconst equipmentNavigate = useContext(EquipmentNavigationContext) as EquipmentContext;\n\n\tconst dispatch = useDispatch();\n\n\tconst [isHeaderVisible, setHeaderVisible] = useState(false);\n\n\tconst [modelName, setModelName] = useState(\"\");\n\tconst [profileId, setProfileId] = useState(\"\");\n\n\tconst NavbarClassList = `product-view__navbar ${isHeaderVisible && \"product-view__navbar--full\"}`;\n\n\tuseEffect(() => {\n\t\tloadModelName();\n\t\tloadProfileId();\n\t\tif (onEquipmentSet && source?.id) {\n\t\t\tonEquipmentSet();\n\t\t}\n\t}, [source]);\n\n\tconst loadProfileId = async (): Promise<void> => {\n\t\tconst { id } = await loadProfileInfoAsync();\n\t\tsetProfileId(id);\n\t};\n\n\tconst loadModelName = async (): Promise<void> => {\n\t\tif (!source?.modelId) {\n\t\t\tsetModelName(\"\");\n\t\t} else {\n\t\t\tconst modelName = await loadSingleProperty(source?.modelId, \"rh_model\", \"rh_name\");\n\t\t\tsetModelName(modelName);\n\t\t}\n\t};\n\n\tconst handleScroll = (event: UIEvent<HTMLElement>): void => {\n\t\tconst target = event.target as HTMLElement;\n\t\tconst top = 40;\n\t\tconst titleEl = target.querySelector(\".product-view__information\")?.querySelector(\"h1\");\n\t\tconst titleTop = titleEl?.getBoundingClientRect().top || 100;\n\t\tif (titleTop < top && !isHeaderVisible) {\n\t\t\tsetHeaderVisible(true);\n\t\t} else if (titleTop > top && isHeaderVisible) {\n\t\t\tsetHeaderVisible(false);\n\t\t}\n\t};\n\n\tconst handleBackClick = (): void => {\n\t\tif (onBackClick) {\n\t\t\tonBackClick();\n\t\t}\n\t\tif (!source.isModel) {\n\t\t\tmainNavigate(\"tabbar-navigator\");\n\t\t\tsetTimeout(() => {\n\t\t\t\tdispatch(setSelectedEquipment(null));\n\t\t\t}, 300);\n\t\t}\n\t};\n\n\tconst onShowMoreClick = (): void => {\n\t\tequipmentNavigate(\"guides-list\");\n\t};\n\n\tconst onUserClick = useCallback((id: string, name?: string): void => {\n\t\tinitiateUserCall(id, name || \"Unknown user\");\n\t}, []);\n\n\tconst onGuideClick = useCallback(async (id: string): Promise<void> => {\n\t\tconst houstonService = new HoustonService();\n\n\t\tconst guideData = await houstonService.loadGuideById(id);\n\t\tif (!guideData) return;\n\n\t\tdispatch(setSelectedGuide(guideData));\n\t}, []);\n\n\tconst renderedGuides = useMemo(() => {\n\t\tif (!source?.guideList?.length) return <></>;\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{source?.guideList.map(({ name, id, imageUniqueName }) => (\n\t\t\t\t\t<GuideListItemComponent\n\t\t\t\t\t\tkey={id}\n\t\t\t\t\t\tid={id}\n\t\t\t\t\t\trh_guideid={id}\n\t\t\t\t\t\trh_name={name}\n\t\t\t\t\t\trh_annotationsubject={imageUniqueName}\n\t\t\t\t\t\tonClick={onGuideClick}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</>\n\t\t);\n\t}, [source?.guideList]);\n\n\tconst renderedExperts = useMemo(() => {\n\t\tconst filteredExperts = source?.users?.filter((expert) => expert.id !== profileId);\n\t\tif (!filteredExperts?.length) return <></>;\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{filteredExperts?.map((expert) => (\n\t\t\t\t\t<ExpertListItem key={expert.id} id={expert.id} name={expert.name} rh_position={expert.position} onClick={onUserClick} />\n\t\t\t\t))}\n\t\t\t</>\n\t\t);\n\t}, [source?.users, profileId]);\n\n\treturn (\n\t\t<div className=\"product-view\" onScroll={handleScroll}>\n\t\t\t<section>\n\t\t\t\t<nav className={NavbarClassList}>\n\t\t\t\t\t<i className=\"product-view__icon-back\" onClick={handleBackClick}>\n\t\t\t\t\t\t<ReactSVG src={ChevronLeftIcon} />\n\t\t\t\t\t</i>\n\t\t\t\t\t<h1>{source?.name || \"No name found\"}</h1>\n\t\t\t\t\t<span />\n\t\t\t\t</nav>\n\t\t\t\t<div className=\"product-view__image-container\">\n\t\t\t\t\t<AnnotationImage\n\t\t\t\t\t\tfetchMethod=\"byIdAndName\"\n\t\t\t\t\t\tannotationId={source?.id}\n\t\t\t\t\t\tannotationName={source?.isModel ? \"ModelImage\" : \"EquipmentImage\"}\n\t\t\t\t\t\tisThumbnail={false}\n\t\t\t\t\t\tplaceholderIcon={CPUIcon}\n\t\t\t\t\t\thasFullscreenMode={true}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t\t<section className=\"product-view__information\">\n\t\t\t\t{modelName && (\n\t\t\t\t\t<h2\n\t\t\t\t\t\tstyle={{ color: \"#2699FB\", display: \"flex\", alignItems: \"center\", alignContent: \"center\" }}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tonModelClick && onModelClick(source?.modelId || \"\");\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{modelName}\n\t\t\t\t\t\t<ReactSVG src={LinkArrow} style={{ display: \"flex\", marginLeft: \"6px\" }} />\n\t\t\t\t\t</h2>\n\t\t\t\t)}\n\t\t\t\t<h1>{source?.name || \"No name found\"}</h1>\n\t\t\t\t<p>{source?.description || \"No desciption found\"}</p>\n\t\t\t\t{source?.serialNumber && (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<span>Serial number</span>\n\t\t\t\t\t\t<b>{source?.serialNumber}</b>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t{source?.installedBy && (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<span>Installed By</span>\n\t\t\t\t\t\t<b>{source?.installedBy}</b>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t{source?.inventoryIdentifier && (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<span>ID</span>\n\t\t\t\t\t\t<b>{source?.inventoryIdentifier}</b>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</section>\n\t\t\t<section className=\"product-view__library\">\n\t\t\t\t<h1>Library</h1>\n\t\t\t\t<h2>Guides</h2>\n\t\t\t\t<div>{renderedGuides}</div>\n\t\t\t\t{source?.moreGuides && (\n\t\t\t\t\t<div className=\"product-view__show-more\" onClick={onShowMoreClick}>\n\t\t\t\t\t\tShow more\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t<h1>Experts</h1>\n\t\t\t\t<div>{renderedExperts}</div>\n\t\t\t</section>\n\t\t</div>\n\t);\n};\n\nexport default React.memo(EquipmentDetail);\n","import React, { ReactElement, useCallback, useContext, useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport \"./style.scss\";\nimport ChevronLeftIcon from \"assets/icons/chevron-left.svg\";\n\nimport { setSelectedGuide, State } from \"store\";\n\nimport EntitiesList from \"components/EntitiesList\";\nimport GuideListItem from \"components/GuideListItem\";\nimport { Context, EquipmentNavigationContext } from \"navigation/EquipmentNavigator\";\nimport { ReactSVG } from \"react-svg\";\nimport HoustonService from \"api/houstonService\";\nimport { AppListSource } from \"@resconet/houston-service/dist/esm/lib/types/listSource\";\n\ninterface ListDataSource {\n\tloadNextEntities: () => void;\n}\n\ninterface Props {\n\tlistSource: AppListSource;\n\tcaption?: string;\n}\n\nconst GuidesList = ({ listSource, caption}: Props): ReactElement => {\n\tconst equipmentNavigate = useContext(EquipmentNavigationContext) as Context;\n\tconst entitiesListRef = useRef<ListDataSource>();\n\n\tconst selectedEquipment = useSelector((state: State) => state?.selectedEquipment);\n\tconst dispatch = useDispatch();\n\n\tconst [dataSource, setDataSource] = useState<AppListSource | null>(null);\n\n\tuseEffect(() => {\n\t\tif (!selectedEquipment) {\n\t\t\tsetDataSource(null);\n\t\t} else {\n\t\t\tsetDataSource(listSource);\n\t\t}\n\t}, [selectedEquipment]);\n\n\tconst handleBackClick = (): void => {\n\t\tequipmentNavigate(\"equipment-detail\");\n\t};\n\n\tconst handleItemClick = useCallback(async (id: string): Promise<void> => {\n\t\tconst houstonService = new HoustonService();\n\n\t\tconst guideData = await houstonService.loadGuideById(id);\n\t\tif (!guideData) return;\n\n\t\tdispatch(setSelectedGuide(guideData));\n\t}, []);\n\n\treturn (\n\t\t<div className=\"guides-list\">\n\t\t\t<nav className=\"guides-list__navbar\">\n\t\t\t\t<i className=\"guides-list__icon-back\" onClick={handleBackClick}>\n\t\t\t\t\t<ReactSVG src={ChevronLeftIcon} />\n\t\t\t\t</i>\n\t\t\t\t<h1>Guides for {caption || selectedEquipment?.name}</h1>\n\t\t\t</nav>\n\t\t\t{dataSource && (\n\t\t\t\t<EntitiesList\n\t\t\t\t\tDataSource={dataSource}\n\t\t\t\t\tListItem={GuideListItem}\n\t\t\t\t\tref={entitiesListRef}\n\t\t\t\t\tonItemClick={handleItemClick}\n\t\t\t\t\tsearchPlaceholder=\"Find a guide\"\n\t\t\t\t/>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default React.memo(GuidesList);\n","import { CSSProperties, ReactElement } from \"react\";\nimport \"./style.scss\";\n\ninterface Props {\n\tchildren: ReactElement;\n\tonCancelClick?: () => void;\n\tcontentHeightPercentage: number;\n\tcontentWidthPercentage: number;\n\tcloseButtonText?: string;\n\troundedCorner?: boolean;\n}\n\nconst ModalContentWrapper = ({\n\tchildren,\n\tonCancelClick,\n\tcontentHeightPercentage,\n\tcloseButtonText,\n\troundedCorner,\n\tcontentWidthPercentage,\n}: Props): ReactElement => {\n\tconst style: CSSProperties = { height: `${contentHeightPercentage}vh`, width: `${contentWidthPercentage}vw`, overflow: \"scroll\" };\n\tif (roundedCorner) style.borderRadius = \"10px 10px 0 0\";\n\n\treturn (\n\t\t<div className=\"modalContentWrapper\" style={style}>\n\t\t\t{closeButtonText && (\n\t\t\t\t<div className=\"modalContentWrapper__button-wrapper\">\n\t\t\t\t\t<div className=\"modalContentWrapper__button\" onClick={onCancelClick}>\n\t\t\t\t\t\t{closeButtonText}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t<div className=\"child-wrapper\">\n\t\t\t\t{children}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default ModalContentWrapper;\n","import { AppListSource } from \"@resconet/houston-service/dist/esm/lib/types/listSource\";\nimport HoustonService from \"./houstonService\";\nimport { waitForPassword } from \"./login\";\n\ntype SourceType = \"model\" | \"equipment\";\n\nclass ModelGuideListSource implements AppListSource {\n\tprivate modelId: string;\n\tprivate houstonService: HoustonService;\n\tprivate searchText?: string;\n\tprivate loaded = false;\n\tprivate type: SourceType = \"equipment\";\n\n\tpublic constructor(modelId: string, type?: SourceType) {\n\t\tthis.modelId = modelId;\n\t\tthis.houstonService = new HoustonService();\n\t\tif (type) this.type = type;\n\t}\n\n\tpublic async getNextPage(): Promise<Record<string, unknown>[]> {\n\t\treturn await waitForPassword(async () => {\n\t\t\tif (this.loaded) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\tconst loaderFunction = this.type === \"model\" ? this.houstonService.loadModelGuideList : this.houstonService.loadEquipmentGuideList;\n\n\t\t\tthis.loaded = true;\n\n\t\t\tif (this.searchText) {\n\t\t\t\treturn (await loaderFunction(this.modelId))\n\t\t\t\t\t.filter((guide) => guide.name.includes(this.searchText || \"\"))\n\t\t\t\t\t.map((guide) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\trh_name: guide.name,\n\t\t\t\t\t\t\trh_annotationsubject: guide.imageUniqueName,\n\t\t\t\t\t\t\trh_guideid: guide.id,\n\t\t\t\t\t\t\tentityName: \"rh_guide\",\n\t\t\t\t\t\t\t...guide,\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn (await loaderFunction(this.modelId)).map((guide) => {\n\t\t\t\treturn { rh_name: guide.name, rh_annotationsubject: guide.imageUniqueName, rh_guideid: guide.id, entityName: \"rh_guide\", ...guide };\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic setFilter(filter: string): void {\n\t\tthis.searchText = filter;\n\t\tthis.loaded = false;\n\t\treturn;\n\t}\n}\n\nexport { ModelGuideListSource };\n","import { ReactElement, createContext, useState, useMemo, useCallback, useEffect, useContext } from \"react\";\nimport SwipeableViews from \"react-swipeable-views\";\n\nimport \"./style.scss\";\n\nimport EquipmentDetail, { EquipmentOrModelFormSource } from \"containers/EquipmentDetail\";\nimport GuidesList from \"containers/GuidesList\";\nimport { registerAndroidBackHandler } from \"api/androidBackClick\";\nimport { useSelector } from \"react-redux\";\nimport { State } from \"store\";\nimport { MainNavigationContext, Context as MainContext } from \"navigation/MainNavigator\";\nimport { isTablet, Orientation, useOrientation } from \"api/tabletTools\";\nimport { Drawer } from \"@mui/material\";\nimport ModalContentWrapper from \"components/ModalContentWrapper/modalContentWrapper\";\nimport { Model } from \"@resconet/houston-service\";\nimport HoustonService from \"api/houstonService\";\nimport { ModelGuideListSource } from \"api/modelGuideListSource\";\n\ntype View = \"equipment-detail\" | \"guides-list\";\nconst Views: View[] = [\"equipment-detail\", \"guides-list\"];\n\nexport type Context = (newView: View) => void;\nexport const EquipmentNavigationContext = createContext<Context | undefined>(undefined);\n\ninterface Props {\n\tonEquipmentSet?: () => void;\n\tonBackClick?: () => void;\n}\n\nconst EquipmentNavigator = ({ onEquipmentSet, onBackClick }: Props): ReactElement => {\n\tconst [view, setView] = useState<View>(\"equipment-detail\");\n\n\tconst mainNavigate = useContext(MainNavigationContext) as MainContext;\n\tconst [equipmentSource, setEquipmentSource] = useState<EquipmentOrModelFormSource>({\n\t\tmoreUsers: false,\n\t\tmoreGuides: false,\n\t});\n\tconst [modelSource, setModelSource] = useState<EquipmentOrModelFormSource>({ moreUsers: false, moreGuides: false });\n\n\tconst selectedEquipment = useSelector((state: State) => state.selectedEquipment);\n\tconst selectedGuide = useSelector((state: State) => state.selectedGuide);\n\tconst [selectedModel, setSelectedModel] = useState<Model>();\n\n\tuseEffect(() => {\n\t\tif (selectedEquipment) {\n\t\t\tsetEquipmentSource({\n\t\t\t\tid: selectedEquipment.id,\n\t\t\t\tname: selectedEquipment.name,\n\t\t\t\tinstalledBy: selectedEquipment.installedBy,\n\t\t\t\tinventoryIdentifier: selectedEquipment.inventoryIdentifier,\n\t\t\t\tdescription: selectedEquipment.description,\n\t\t\t\tserialNumber: selectedEquipment.serialNumber,\n\t\t\t\tmodelId: selectedEquipment.modelId,\n\t\t\t\tusers: selectedEquipment.experts,\n\t\t\t\tguideList: selectedEquipment.guideList,\n\t\t\t\tmoreGuides: selectedEquipment.moreGuides,\n\t\t\t\tmoreUsers: true,\n\t\t\t});\n\t\t}\n\t}, [selectedEquipment]);\n\n\tuseEffect(() => {\n\t\tif (selectedModel) {\n\t\t\tsetModelSource({\n\t\t\t\tid: selectedModel.id,\n\t\t\t\tname: selectedModel.name,\n\t\t\t\tdescription: selectedModel.description,\n\t\t\t\tusers: selectedModel.experts,\n\t\t\t\tguideList: selectedModel.guideList,\n\t\t\t\tmoreUsers: false,\n\t\t\t\tmoreGuides: selectedModel.moreGuides,\n\t\t\t\tisModel: true,\n\t\t\t});\n\t\t\tsetIsModelOpen(true);\n\t\t}\n\t}, [selectedModel]);\n\n\tconst navigate = useCallback((newView: View): void => {\n\t\tsetView(newView);\n\t}, []);\n\n\tconst orientation = useOrientation();\n\tconst [isTabletLandscape, setIsTabletLandscape] = useState(false);\n\tuseEffect(() => {\n\t\tsetIsTabletLandscape(orientation === Orientation.Landscape && isTablet());\n\t}, [orientation]);\n\n\tuseEffect(() => {\n\t\tregisterAndroidBackHandler(\"equipment-navigator\", androidBackHandler);\n\t}, [view, selectedEquipment, selectedGuide]);\n\n\tconst androidBackHandler = (): void => {\n\t\tif (view === \"equipment-detail\" && selectedEquipment) {\n\t\t\tmainNavigate(\"tabbar-navigator\");\n\t\t}\n\t\tif (view === \"guides-list\" && !selectedGuide) {\n\t\t\tnavigate(\"equipment-detail\");\n\t\t}\n\t};\n\n\tconst viewNameToIndex = useMemo(() => Views.indexOf(view), [view]);\n\n\tconst onModelClick = useCallback(\n\t\tasync (modelId: string) => {\n\t\t\tconst service = new HoustonService();\n\t\t\ttry {\n\t\t\t\tconst model = await service.loadModelById(modelId);\n\t\t\t\tsetSelectedModel(model);\n\t\t\t} catch (e) {\n\t\t\t\tMobileCRM.bridge.alert(e);\n\t\t\t}\n\t\t},\n\t\t[selectedEquipment]\n\t);\n\n\tconst [isModelOpen, setIsModelOpen] = useState(false);\n\n\tconst equipmentGuideListDataSource = useMemo(() => {\n\t\tif (selectedEquipment?.id) return new ModelGuideListSource(selectedEquipment.id);\n\t}, [selectedEquipment]);\n\n\tconst modelGuideListDataSource = useMemo(() => {\n\t\tif (selectedModel?.id) return new ModelGuideListSource(selectedModel.id, \"model\");\n\t}, [selectedModel]);\n\n\treturn (\n\t\t<EquipmentNavigationContext.Provider value={navigate}>\n\t\t\t<SwipeableViews index={viewNameToIndex} className={`equipment-navigator${isTabletLandscape ? \"__tablet\" : \"\"}`} disabled>\n\t\t\t\t<EquipmentDetail onModelClick={onModelClick} source={equipmentSource} onEquipmentSet={onEquipmentSet} onBackClick={onBackClick} />\n\t\t\t\t{equipmentGuideListDataSource && <GuidesList listSource={equipmentGuideListDataSource} />}\n\t\t\t</SwipeableViews>\n\t\t\t<Drawer anchor=\"right\" open={isModelOpen} PaperProps={{ style: { backgroundColor: \"transparent\", alignItems: \"center\" } }}>\n\t\t\t\t<ModalContentWrapper contentWidthPercentage={isTabletLandscape ? 40 : 100} contentHeightPercentage={100}>\n\t\t\t\t\t<SwipeableViews index={viewNameToIndex} className={`equipment-navigator${isTabletLandscape ? \"__tablet\" : \"\"}`} disabled>\n\t\t\t\t\t\t<EquipmentDetail onBackClick={() => setIsModelOpen(false)} source={modelSource} onEquipmentSet={onEquipmentSet} />\n\t\t\t\t\t\t{modelGuideListDataSource && <GuidesList caption={modelSource?.name} listSource={modelGuideListDataSource} />}\n\t\t\t\t\t</SwipeableViews>\n\t\t\t\t</ModalContentWrapper>\n\t\t\t</Drawer>\n\t\t</EquipmentNavigationContext.Provider>\n\t);\n};\n\nexport default EquipmentNavigator;\n","import EquipmentList from \"containers/EquipmentList\";\nimport EquipmentNavigator from \"navigation/EquipmentNavigator\";\nimport { ReactElement, useCallback, useState } from \"react\";\nimport Sidebar from \"react-sidebar\";\nimport \"./style.scss\";\n\ninterface Props {\n\tonProfileClick?: () => void;\n}\n\nconst EquipmentListTablet = ({ onProfileClick }: Props): ReactElement => {\n\tconst [showEquipmentPreview, setShowEquipmentPreview] = useState(false);\n\n\tconst handleEquipmentSet = useCallback(() => {\n\t\tsetShowEquipmentPreview(true);\n\t}, []);\n\n\tconst handleOnBackClick = useCallback(() => {\n\t\tsetShowEquipmentPreview(false);\n\t}, []);\n\n\treturn (\n\t\t<Sidebar\n\t\t\tsidebar={<EquipmentNavigator onBackClick={handleOnBackClick} onEquipmentSet={handleEquipmentSet} />}\n\t\t\tpullRight\n\t\t\tdocked={showEquipmentPreview}\n\t\t\ttouch={false}\n\t\t\tsidebarClassName=\"sidebar-content\"\n\t\t>\n\t\t\t<EquipmentList onProfileClickCallback={onProfileClick} />\n\t\t</Sidebar>\n\t);\n};\n\nexport default EquipmentListTablet;\n","import { SelectItem } from \"components/FieldSelect\";\nimport { createContext, useContext } from \"react\";\n\nexport interface CollectForm {\n\ttitle: string;\n\tequipment: SelectItem | null;\n\tdescription: string;\n\tcategory: SelectItem | null;\n\tcoverPhoto: string;\n\tsteps: CollectFormStep[];\n}\n\nexport interface CollectFormStep {\n\tid: number;\n\ttitle: string;\n\tphoto: string;\n\tdescription: string;\n\timageUniqueName: string;\n}\n\ninterface ICollectFormContext {\n\tstate: CollectForm;\n\thandleChange: (name: string, newValue: StoreValue) => void;\n}\n\ninterface ReducerAction {\n\tkey: string;\n\tpayload: {\n\t\tnewValue: StoreValue;\n\t\textra?: string | number;\n\t};\n}\n\nexport type StoreValue = unknown;\n\nconst InitialState: CollectForm = {\n\ttitle: \"\",\n\tequipment: null,\n\tdescription: \"\",\n\tcategory: null,\n\tcoverPhoto: \"\",\n\tsteps: [\n\t\t{\n\t\t\tid: 1,\n\t\t\ttitle: \"\",\n\t\t\tphoto: \"\",\n\t\t\tdescription: \"\",\n\t\t\timageUniqueName: \"\",\n\t\t},\n\t],\n};\n\nconst CollectFormReducer = (state: CollectForm, { key, payload }: ReducerAction): void => {\n\tswitch (key) {\n\t\tcase \"title\":\n\t\t\tstate.title = payload.newValue as string;\n\t\t\treturn;\n\t\tcase \"equipment\":\n\t\t\tstate.equipment = payload.newValue as SelectItem;\n\t\t\treturn;\n\t\tcase \"description\":\n\t\t\tstate.description = payload.newValue as string;\n\t\t\treturn;\n\t\tcase \"category\":\n\t\t\tstate.category = payload.newValue as SelectItem;\n\t\t\treturn;\n\t\tcase \"coverPhoto\":\n\t\t\tstate.coverPhoto = payload.newValue as string;\n\t\t\treturn;\n\t\tcase \"steps\":\n\t\t\tstate.steps = payload.newValue as CollectFormStep[];\n\t\t\treturn;\n\t\tcase \"deleteAll\":\n\t\t\tstate = InitialState;\n\t\t\treturn;\n\t\tdefault:\n\t\t\tthrow new Error(`No reducer available for key: ${key}`);\n\t}\n};\n\nconst CollectFormContext = createContext<ICollectFormContext>({\n\tstate: InitialState,\n\thandleChange: () => {\n\t\treturn;\n\t},\n});\n\nconst useCollectFormContext = (): ICollectFormContext => {\n\tconst context = useContext(CollectFormContext);\n\tif (!context) {\n\t\tthrow new Error(\"useCollectFormContext must be used within a Context provider.\");\n\t}\n\n\treturn context;\n};\n\nexport { InitialState, CollectFormContext, CollectFormReducer, useCollectFormContext };\n","export default __webpack_public_path__ + \"static/media/chevron-down.26a26bc6.svg\";","import { ChangeEvent, ReactElement } from \"react\";\nimport { ReactSVG } from \"react-svg\";\n\nimport \"./style.scss\";\nimport ChevronDownIcon from \"assets/icons/chevron-down.svg\";\n\nexport interface SelectItem {\n\tname: string;\n\tid: string;\n}\n\ninterface Props {\n\titems: SelectItem[];\n\tselectedItem: SelectItem | null;\n\tsetSelectedItem: (item: SelectItem | null) => void;\n\tlabel: string;\n}\n\nconst FieldSelect = ({ items, selectedItem, setSelectedItem, label }: Props): ReactElement => {\n\tconst onSelectChange = (event: ChangeEvent<HTMLSelectElement>): void => {\n\t\tconst selectEl = event.target;\n\t\tconst newValue = selectEl.value;\n\n\t\tif (newValue === \"None\") {\n\t\t\tsetSelectedItem(null);\n\t\t\treturn;\n\t\t}\n\n\t\tconst newItem = findItemByValue(newValue);\n\t\tif (newItem) {\n\t\t\tsetSelectedItem(newItem);\n\t\t}\n\t};\n\n\tconst findItemByValue = (value: string): SelectItem | null => {\n\t\treturn items.find((i) => i.name === value) || null;\n\t};\n\n\treturn (\n\t\t<div className=\"field-select\">\n\t\t\t<span className=\"field-select__label\">{label}</span>\n\t\t\t<h1 className=\"field-select__name\">{selectedItem?.name || <b>Select</b>}</h1>\n\t\t\t<select onChange={onSelectChange}>\n\t\t\t\t<option>None</option>\n\t\t\t\t{items.map((i) => (\n\t\t\t\t\t<option value={i.name}>{i.name}</option>\n\t\t\t\t))}\n\t\t\t</select>\n\t\t\t<i className=\"field-select__icon\">\n\t\t\t\t<ReactSVG src={ChevronDownIcon} />\n\t\t\t</i>\n\t\t</div>\n\t);\n};\n\nexport default FieldSelect;\n","import { ReactElement, useContext } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { State } from \"store\";\nimport { CollectNavigationContext, Context } from \"navigation/CollectNavigator\";\nimport { useCollectFormContext } from \"containers/CollectScreen/store\";\n\nimport Button from \"components/Button\";\nimport TextInput from \"components/TextInput\";\nimport FieldSelect from \"components/FieldSelect\";\n\nconst CollectScreenOne = (): ReactElement => {\n\tconst { state, handleChange } = useCollectFormContext();\n\tconst [allEquipmentData, allCategoriesData] = useSelector((state: State) => [state.equipment, state.categories]);\n\n\tconst collectNavigate = useContext(CollectNavigationContext) as Context;\n\n\tconst onContinuePress = (): void => {\n\t\tcollectNavigate(\"step-2\");\n\t};\n\n\treturn (\n\t\t<div className=\"collect-screen__content\">\n\t\t\t<div className=\"collect-screen__form\">\n\t\t\t\t<TextInput\n\t\t\t\t\tvalue={state.title}\n\t\t\t\t\tonChange={(value) => handleChange(\"title\", value)}\n\t\t\t\t\tlabel=\"Title *\"\n\t\t\t\t\ttheme=\"light\"\n\t\t\t\t\tplaceholder=\"Add Title\"\n\t\t\t\t\tstartCapital\n\t\t\t\t/>\n\t\t\t\t<FieldSelect\n\t\t\t\t\titems={allEquipmentData}\n\t\t\t\t\tselectedItem={state.equipment}\n\t\t\t\t\tsetSelectedItem={(value) => handleChange(\"equipment\", value)}\n\t\t\t\t\tlabel=\"Equipment\"\n\t\t\t\t/>\n\t\t\t\t<TextInput\n\t\t\t\t\tvalue={state.description}\n\t\t\t\t\tonChange={(value) => handleChange(\"description\", value)}\n\t\t\t\t\tlabel=\"Description\"\n\t\t\t\t\ttheme=\"light\"\n\t\t\t\t\tplaceholder=\"Add description\"\n\t\t\t\t\tstartCapital\n\t\t\t\t\tmultiline\n\t\t\t\t/>\n\t\t\t\t<FieldSelect\n\t\t\t\t\titems={allCategoriesData}\n\t\t\t\t\tselectedItem={state.category}\n\t\t\t\t\tsetSelectedItem={(value) => handleChange(\"category\", value)}\n\t\t\t\t\tlabel=\"Category\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<Button onPress={onContinuePress} disabled={!state?.title?.length}>Continue</Button>\n\t\t</div>\n\t);\n};\n\nexport default CollectScreenOne;\n","export default __webpack_public_path__ + \"static/media/trash.7107d61e.svg\";","import { ReactElement } from \"react\";\nimport { ReactSVG } from \"react-svg\";\n\nimport \"./style.scss\";\nimport PlusIcon from \"assets/icons/plus.svg\";\nimport TrashIcon from \"assets/icons/trash.svg\";\n\ninterface DocumentService extends Omit<MobileCRM.Services.DocumentService, \"maxImageSize\"> {\n\tmaxImageSize: string;\n}\n\ninterface Props {\n\tbase64: string;\n\tonChange: (value: string) => void;\n\tslim?: boolean;\n}\n\ntype PhotoMethod = \"camera\" | \"gallery\";\n\nconst IMAGE_SIZE = \"2048x1536\";\n\nconst PhotoPicker = ({ base64, onChange, slim }: Props): ReactElement => {\n\tconst classList = `photo-picker ${slim && \"photo-picker--slim\"}`;\n\n\tconst onPlusClick = async (): Promise<void> => {\n\t\tconst photoMethod = await askUserToPick();\n\t\tlet imageData;\n\t\tif (photoMethod === \"camera\") {\n\t\t\timageData = await handleCapturePhotoClick();\n\t\t\tonChange(imageData);\n\t\t} else if (photoMethod === \"gallery\") {\n\t\t\timageData = await handlePickImageClick();\n\t\t\tonChange(imageData);\n\t\t}\n\t};\n\n\tconst onDeleteClick = (): void => {\n\t\tonChange(\"\");\n\t};\n\n\tconst askUserToPick = async (): Promise<PhotoMethod | null> => {\n\t\tconst messageBox = new MobileCRM.UI.MessageBox(\"Choose one\");\n\t\tmessageBox.items = [\"Open camera\", \"Pick from gallery\", \"Cancel\"];\n\n\t\tconst response = await messageBox.showAsync();\n\t\tif (response === \"Open camera\") return \"camera\";\n\t\telse if (response === \"Pick from gallery\") return \"gallery\";\n\t\treturn null;\n\t};\n\n\tconst handleCapturePhotoClick = async (): Promise<string> => {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst service = new MobileCRM.Services.DocumentService() as unknown;\n\t\t\tconst serviceTyped = service as DocumentService;\n\n\t\t\tserviceTyped.maxImageSize = IMAGE_SIZE;\n\t\t\tserviceTyped.capturePhoto((fileinfo) => {\n\t\t\t\tMobileCRM.Application.readFileAsBase64(\n\t\t\t\t\tfileinfo.filePath,\n\t\t\t\t\t(base64) => {\n\t\t\t\t\t\tresolve(base64);\n\t\t\t\t\t},\n\t\t\t\t\treject\n\t\t\t\t);\n\t\t\t}, reject);\n\t\t});\n\t};\n\n\tconst handlePickImageClick = async (): Promise<string> => {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst service = new MobileCRM.Services.DocumentService() as unknown;\n\t\t\tconst serviceTyped = service as DocumentService;\n\n\t\t\tserviceTyped.maxImageSize = IMAGE_SIZE;\n\t\t\tserviceTyped.selectPhoto((fileinfo) => {\n\t\t\t\tMobileCRM.Application.readFileAsBase64(\n\t\t\t\t\tfileinfo.filePath,\n\t\t\t\t\t(base64) => {\n\t\t\t\t\t\tresolve(base64);\n\t\t\t\t\t},\n\t\t\t\t\treject\n\t\t\t\t);\n\t\t\t}, reject);\n\t\t});\n\t};\n\n\tif (base64) {\n\t\treturn (\n\t\t\t<div className=\"photo-picker__image-container\">\n\t\t\t\t<img src={`data:image/png;base64, ${base64}`} alt=\"\" />\n\t\t\t\t<i className=\"photo-picker__icon-delete\" onClick={onDeleteClick}>\n\t\t\t\t\t<ReactSVG src={TrashIcon} />\n\t\t\t\t</i>\n\t\t\t</div>\n\t\t);\n\t} else {\n\t\treturn (\n\t\t\t<div className={classList} onClick={onPlusClick}>\n\t\t\t\t<i className=\"photo-picker__icon-plus\">\n\t\t\t\t\t<ReactSVG src={PlusIcon} />\n\t\t\t\t</i>\n\t\t\t\tAdd photo\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nexport default PhotoPicker;\n","import { ReactElement, useEffect } from \"react\";\nimport { ReactSVG } from \"react-svg\";\n\nimport \"./style.scss\";\nimport TrashIcon from \"assets/icons/trash.svg\";\n\nimport { CollectFormStep, useCollectFormContext } from \"containers/CollectScreen/store\";\nimport TextInput from \"components/TextInput\";\nimport PhotoPicker from \"components/PhotoPicker\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ImageToSave, setImagesToSave, State } from \"store\";\nimport { HoustonServiceTools, Media } from \"@resconet/houston-service\";\n\ninterface Props {\n\tstepId: number;\n\thideTrashIcon?: boolean;\n}\n\nexport const imageToBlob = async (image: Media): Promise<Blob> => {\n\tconst result = await fetch(`data:${image.mimeType};base64, ${image.srcB64}`);\n\treturn result.blob();\n};\n\nexport const removeCollectedImageWithThumbnail = (images: ImageToSave[], imageName: string): ImageToSave[] => {\n\treturn images.filter((img) => {\n\t\tconst isWantedImage = img.imageUniqueName === imageName;\n\t\tconst isWantedThumb = img.imageUniqueName === `${imageName}_thumb`;\n\t\tif (isWantedImage || isWantedThumb) URL.revokeObjectURL(img.url);\n\t\treturn !isWantedThumb && !isWantedImage;\n\t});\n};\n\nconst CollectStep = ({ stepId, hideTrashIcon }: Props): ReactElement => {\n\tconst { state, handleChange } = useCollectFormContext();\n\n\tconst stepData = state.steps.find((s) => s.id === stepId) as CollectFormStep;\n\tconst imagesToSave = useSelector((state: State) => state.imagesToSave);\n\tconst dispatch = useDispatch();\n\n\tconst updateStepField = async (field: string, value: string): Promise<void> => {\n\t\tconst stepDataCopy = { ...stepData, [field]: value };\n\n\t\tif (field === \"photo\") {\n\t\t\tconst filtredImages = removeCollectedImageWithThumbnail(imagesToSave, stepData.imageUniqueName);\n\n\t\t\tif (value === \"\") {\n\t\t\t\tdispatch(setImagesToSave(filtredImages));\n\t\t\t} else {\n\t\t\t\tconst imageToResize = HoustonServiceTools.createNewImage(\"image\");\n\t\t\t\timageToResize.srcB64 = value;\n\n\t\t\t\tconst normalizedImage = await HoustonServiceTools.normalizeImageSize(imageToResize);\n\t\t\t\tconst thumbnailImage = await HoustonServiceTools.createImageThumbnail(normalizedImage);\n\n\t\t\t\tconst normalizedImageBlob = await imageToBlob(normalizedImage);\n\t\t\t\tconst thumbnailBlob = await imageToBlob(thumbnailImage);\n\n\t\t\t\tconst normalizedImageUrl = URL.createObjectURL(normalizedImageBlob);\n\t\t\t\tconst thumbnailUrl = URL.createObjectURL(thumbnailBlob);\n\n\t\t\t\tconst name = HoustonServiceTools.generateImageUniqueName(\"step-image\");\n\t\t\t\tconst imageToSave = {\n\t\t\t\t\timageUniqueName: name,\n\t\t\t\t\turl: normalizedImageUrl,\n\t\t\t\t\tmimeType: normalizedImage.mimeType,\n\t\t\t\t};\n\n\t\t\t\tconst thumbnailToSave = {\n\t\t\t\t\timageUniqueName: `${name}_thumb`,\n\t\t\t\t\turl: thumbnailUrl,\n\t\t\t\t\tmimeType: thumbnailImage.mimeType,\n\t\t\t\t};\n\n\t\t\t\tstepDataCopy.imageUniqueName = name;\n\n\t\t\t\tfiltredImages.push(imageToSave);\n\t\t\t\tfiltredImages.push(thumbnailToSave);\n\t\t\t\tdispatch(setImagesToSave(filtredImages));\n\t\t\t}\n\t\t}\n\n\t\tconst stepsCopy = [...state.steps].filter((step) => step.id !== stepId);\n\t\tstepsCopy.push(stepDataCopy);\n\n\t\thandleChange(\"steps\", stepsCopy);\n\t};\n\n\tconst deleteStepById = (givenId: number): void => {\n\t\tlet stepsCopy = [...state.steps];\n\t\tlet deletingStep = {\n\t\t\tid: 0,\n\t\t\ttitle: \"\",\n\t\t\tphoto: \"\",\n\t\t\tdescription: \"\",\n\t\t\timageUniqueName: \"\",\n\t\t};\n\n\t\tstepsCopy = stepsCopy.filter((step) => {\n\t\t\tconst isDeletingStep = step.id === givenId;\n\t\t\tif (isDeletingStep) deletingStep = step;\n\t\t\treturn !isDeletingStep;\n\t\t});\n\n\t\tconst filtredImages = removeCollectedImageWithThumbnail(imagesToSave, deletingStep?.imageUniqueName);\n\n\t\tdispatch(setImagesToSave(filtredImages));\n\n\t\tstepsCopy = stepsCopy.map((step) => {\n\t\t\tlet newId;\n\t\t\tif (step.id > givenId) {\n\t\t\t\tnewId = step.id - 1;\n\t\t\t} else {\n\t\t\t\tnewId = step.id;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...step,\n\t\t\t\tid: newId,\n\t\t\t};\n\t\t});\n\n\t\thandleChange(\"steps\", stepsCopy);\n\t};\n\n\tconst onDeleteClick = (): void => {\n\t\tdeleteStepById(stepId);\n\t};\n\n\treturn (\n\t\t<div className=\"collect-step\">\n\t\t\t<nav className=\"collect-step__toolbar\">\n\t\t\t\t<h1 className=\"collect-step__count\">Step {stepId}</h1>\n\t\t\t\t{!hideTrashIcon && (\n\t\t\t\t\t<i className=\"collect-step__icon-more\" onClick={onDeleteClick}>\n\t\t\t\t\t\t<ReactSVG src={TrashIcon} />\n\t\t\t\t\t</i>\n\t\t\t\t)}\n\t\t\t</nav>\n\t\t\t<main className=\"collect-step__content\">\n\t\t\t\t<TextInput\n\t\t\t\t\tvalue={stepData.title}\n\t\t\t\t\tonChange={(value) => {\n\t\t\t\t\t\tupdateStepField(\"title\", value);\n\t\t\t\t\t}}\n\t\t\t\t\tlabel={\"Step title *\"}\n\t\t\t\t\tplaceholder={\"Step title\"}\n\t\t\t\t\ttheme=\"light\"\n\t\t\t\t\tstartCapital\n\t\t\t\t/>\n\t\t\t\t<PhotoPicker\n\t\t\t\t\tbase64={stepData.photo}\n\t\t\t\t\tonChange={(value) => {\n\t\t\t\t\t\tupdateStepField(\"photo\", value);\n\t\t\t\t\t}}\n\t\t\t\t\tslim\n\t\t\t\t/>\n\t\t\t\t<TextInput\n\t\t\t\t\tvalue={stepData.description}\n\t\t\t\t\tonChange={(value) => {\n\t\t\t\t\t\tupdateStepField(\"description\", value);\n\t\t\t\t\t}}\n\t\t\t\t\tlabel={\"Step description\"}\n\t\t\t\t\tplaceholder={\"Step description\"}\n\t\t\t\t\ttheme=\"light\"\n\t\t\t\t\tmultiline\n\t\t\t\t\tnoMargin\n\t\t\t\t/>\n\t\t\t</main>\n\t\t</div>\n\t);\n};\n\nexport default CollectStep;\n","import { ReactElement, useContext, useMemo, useState } from \"react\";\n\nimport { CollectNavigationContext, Context as CollectContext } from \"navigation/CollectNavigator\";\nimport { useCollectFormContext } from \"containers/CollectScreen/store\";\n\nimport Button from \"components/Button\";\nimport PhotoPicker from \"components/PhotoPicker\";\nimport CollectStep, { imageToBlob, removeCollectedImageWithThumbnail } from \"components/CollectStep\";\nimport { HoustonServiceTools } from \"@resconet/houston-service\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setImagesToSave, State } from \"store\";\n\nconst CollectScreenTwo = (): ReactElement => {\n\tconst collectNavigate = useContext(CollectNavigationContext) as CollectContext;\n\tconst { state, handleChange } = useCollectFormContext();\n\n\tconst areAllTitlesFilled = (): boolean => {\n\t\tconst thereIsEmptyStep = state.steps.slice().find((step) => step.title.trim() === \"\");\n\t\treturn !thereIsEmptyStep;\n\t};\n\n\tconst lastTitleIsFilled = (): boolean => {\n\t\tconst sortedById = state.steps.slice().sort((a, b) => a.id - b.id);\n\t\treturn sortedById[sortedById.length - 1].title !== \"\";\n\t};\n\n\tconst lastStepId = (): number => {\n\t\tconst sortedById = state.steps.slice().sort((a, b) => a.id - b.id);\n\t\treturn sortedById[sortedById.length - 1].id;\n\t};\n\n\tconst createNewEmptyStep = (): void => {\n\t\tconst stepsCopy = [...state.steps];\n\t\tconst newId = lastStepId() + 1;\n\n\t\tstepsCopy.push({\n\t\t\tid: newId,\n\t\t\ttitle: \"\",\n\t\t\tphoto: \"\",\n\t\t\tdescription: \"\",\n\t\t\timageUniqueName: \"\",\n\t\t});\n\n\t\thandleChange(\"steps\", stepsCopy);\n\t};\n\n\tconst imagesToSave = useSelector((state: State) => state.imagesToSave);\n\tconst dispatch = useDispatch();\n\tconst [coverPhotoBase64, setCoverPhotoBase64] = useState(\"\");\n\n\tconst handleCoverPhotoChange = async (value: string): Promise<void> => {\n\t\tconst newImagesToSave = removeCollectedImageWithThumbnail(imagesToSave, state.coverPhoto);\n\t\tsetCoverPhotoBase64(value);\n\n\t\tif (value !== \"\") {\n\t\t\tconst imageToResize = HoustonServiceTools.createNewImage(\"image\");\n\t\t\timageToResize.srcB64 = value;\n\n\t\t\tconst normalizedImage = await HoustonServiceTools.normalizeImageSize(imageToResize);\n\t\t\tconst thumbnailImage = await HoustonServiceTools.createImageThumbnail(normalizedImage);\n\n\t\t\tconst normalizedImageBlob = await imageToBlob(normalizedImage);\n\t\t\tconst thumbnailBlob = await imageToBlob(thumbnailImage);\n\n\t\t\tconst normalizedImageUrl = URL.createObjectURL(normalizedImageBlob);\n\t\t\tconst thumbnailUrl = URL.createObjectURL(thumbnailBlob);\n\n\t\t\tconst name = HoustonServiceTools.generateImageUniqueName(\"step-image\");\n\t\t\tconst newImageToSave = {\n\t\t\t\timageUniqueName: name,\n\t\t\t\turl: normalizedImageUrl,\n\t\t\t\tmimeType: normalizedImage.mimeType,\n\t\t\t};\n\n\t\t\tconst newThumbnailToSave = {\n\t\t\t\timageUniqueName: `${name}_thumb`,\n\t\t\t\turl: thumbnailUrl,\n\t\t\t\tmimeType: thumbnailImage.mimeType,\n\t\t\t};\n\n\t\t\tnewImagesToSave.push(newImageToSave);\n\t\t\tnewImagesToSave.push(newThumbnailToSave);\n\t\t\thandleChange(\"coverPhoto\", name);\n\t\t} else {\n\t\t\thandleChange(\"coverPhoto\", \"\");\n\t\t}\n\n\t\tdispatch(setImagesToSave(newImagesToSave));\n\t};\n\n\tconst categoryElement = useMemo((): ReactElement => {\n\t\tif (state.category) {\n\t\t\treturn <h2 className=\"collect-screen__category\">{state.category.name}</h2>;\n\t\t}\n\t\treturn <></>;\n\t}, [state?.category?.name]);\n\n\tconst titleElement = useMemo((): ReactElement => {\n\t\tif (state.title) {\n\t\t\treturn <h1 className=\"collect-screen__title\">{state.title}</h1>;\n\t\t}\n\t\treturn <></>;\n\t}, [state.title]);\n\n\tconst descriptionElement = useMemo((): ReactElement => {\n\t\tif (state.description) {\n\t\t\treturn <p className=\"collect-screen__description\">{state.description}</p>;\n\t\t}\n\t\treturn <></>;\n\t}, [state.description]);\n\n\tconst renderedSteps = useMemo((): ReactElement => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{state.steps\n\t\t\t\t\t.slice()\n\t\t\t\t\t.sort((a, b) => a.id - b.id)\n\t\t\t\t\t.map((step) => (\n\t\t\t\t\t\t<CollectStep key={step.id} stepId={step.id} hideTrashIcon={step.id === 1} />\n\t\t\t\t\t))}\n\t\t\t</>\n\t\t);\n\t}, [state.steps]);\n\n\tconst renderedNewStepButton = useMemo((): ReactElement => {\n\t\tif (lastTitleIsFilled()) {\n\t\t\treturn (\n\t\t\t\t<Button onPress={createNewEmptyStep} theme=\"inverted\">\n\t\t\t\t\tAdd next step\n\t\t\t\t</Button>\n\t\t\t);\n\t\t}\n\t\treturn <></>;\n\t}, [lastTitleIsFilled(), createNewEmptyStep]);\n\n\tconst onPreviewPress = async (): Promise<void> => {\n\t\tcollectNavigate(\"step-3\");\n\t};\n\n\tconst onBackPress = (): void => {\n\t\tcollectNavigate(\"step-1\");\n\t};\n\n\treturn (\n\t\t<div className=\"collect-screen__content\">\n\t\t\t<div className=\"collect-screen__form\">\n\t\t\t\t<PhotoPicker base64={coverPhotoBase64} onChange={handleCoverPhotoChange} />\n\t\t\t\t{categoryElement}\n\t\t\t\t{titleElement}\n\t\t\t\t{descriptionElement}\n\t\t\t\t{renderedSteps}\n\t\t\t\t{renderedNewStepButton}\n\t\t\t</div>\n\t\t\t<span className=\"collect-screen__spacer collect-screen__spacer--big\" />\n\t\t\t<Button onPress={onPreviewPress} disabled={!areAllTitlesFilled()}>\n\t\t\t\tPreview & Send\n\t\t\t</Button>\n\t\t\t<span className=\"collect-screen__spacer\" />\n\t\t\t<Button onPress={onBackPress} theme=\"minimal\">\n\t\t\t\tBack\n\t\t\t</Button>\n\t\t</div>\n\t);\n};\n\nexport default CollectScreenTwo;\n","import { ReactElement } from \"react\";\n\nimport \"./style.scss\";\n\ninterface Props {\n\tcurrentVal: number;\n\tmaxVal: number;\n}\n\nconst CollectProgress = ({ currentVal, maxVal }: Props): ReactElement => {\n\tconst stepString = `${currentVal}/${maxVal}`;\n\tconst numberValue = `${((currentVal / maxVal) * 100).toFixed(0)}`;\n\tconst percentageValue = numberValue + \"%\";\n\n\treturn (\n\t\t<h2 className=\"collect-progress\">\n\t\t\t<span className=\"collect-progress__step\">{stepString}</span>\n\t\t\t<div className=\"collect-progress__progress-line\">\n\t\t\t\t<span style={{ width: percentageValue }} />\n\t\t\t</div>\n\t\t</h2>\n\t);\n};\n\nexport default CollectProgress;\n","import { ReactElement, useState } from \"react\";\n\nimport \"./style.scss\";\n\nimport AnnotationImage from \"components/AnnotationImage\";\nimport GuideIcon from \"assets/icons/guide.svg\";\nimport TextInput from \"components/TextInput\";\nimport Button from \"components/Button\";\nimport { Feedback, Guide } from \"@resconet/houston-service\";\n\ninterface Props {\n\tsubmitClick: (feedback: Feedback) => void;\n\tguide: Guide;\n}\n\nexport const FeedbackModal = ({ submitClick, guide }: Props): ReactElement => {\n\tconst feedbackRatingOptions = [\n\t\t{ text: \"Yes!\", rating: 3 },\n\t\t{ text: \"Partially\", rating: 2 },\n\t\t{ text: \"No\", rating: 1 },\n\t];\n\n\tconst [comment, setComment] = useState<string>(\"\");\n\tconst [selectedOptionRating, setSelectedOptionRating] = useState<number>(3);\n\n\tconst saveFeedback = (): void => {\n\t\tif (guide) {\n\t\t\tsubmitClick({\n\t\t\t\tminrating: 1,\n\t\t\t\tmaxrating: 3,\n\t\t\t\tcomment: comment,\n\t\t\t\trating: selectedOptionRating,\n\t\t\t\tregardingobjectid: guide.id,\n\t\t\t\ttitle: guide.name,\n\t\t\t});\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className=\"review-modal\">\n\t\t\t<div className=\"information\">\n\t\t\t\t<div className=\"user-photo\">\n\t\t\t\t\t<AnnotationImage\n\t\t\t\t\t\tfetchMethod=\"byUniqueName\"\n\t\t\t\t\t\tannotationName={guide?.imageUniqueName}\n\t\t\t\t\t\tisThumbnail={false}\n\t\t\t\t\t\tplaceholderIcon={GuideIcon}\n\t\t\t\t\t\thasFullscreenMode={false}\n\t\t\t\t\t></AnnotationImage>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"title\">Quick feedback</div>\n\t\t\t\t<div className=\"description\">Did this help you to solve your problem?</div>\n\t\t\t\t<div className=\"buttons\">\n\t\t\t\t\t{feedbackRatingOptions.map(({ text, rating }) => {\n\t\t\t\t\t\tconst theme = rating === selectedOptionRating ? \"selected\" : \"inverted\";\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tkey={text}\n\t\t\t\t\t\t\t\tonPress={() => {\n\t\t\t\t\t\t\t\t\tsetSelectedOptionRating(rating);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\ttheme={theme}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{text}\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t\t<TextInput\n\t\t\t\t\tvalue={comment}\n\t\t\t\t\tonChange={(value) => {\n\t\t\t\t\t\tsetComment(value);\n\t\t\t\t\t}}\n\t\t\t\t\tlabel={\"Comment\"}\n\t\t\t\t\tplaceholder={\"Add your comments\"}\n\t\t\t\t\ttheme=\"light\"\n\t\t\t\t\tstartCapital\n\t\t\t\t\tmultiline\n\t\t\t\t\tmaxLength={2000}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className=\"submit-button\">\n\t\t\t\t<Button onPress={saveFeedback}>Send feedback</Button>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default FeedbackModal;\n","import { FeedbackModal } from \"./feedbackModal\";\n\nexport default FeedbackModal;","import { ReactElement } from \"react\";\n\nimport \"./PDFViewer.scss\";\n\nimport Button from \"components/Button\";\nimport { PDFViewTouchZoomable } from \"@resconet/houston-ui\";\nimport { PDFDocumentObject } from \"store\";\nimport { useResizeDetector } from \"react-resize-detector\";\nimport LoadingWheel from \"components/LoadingWheel\";\n\ninterface PDFViewerOwnProps {\n\tcloseModal: () => void;\n\tpdfObject: PDFDocumentObject | undefined;\n}\ninterface LoadingModalOwnProps {\n\twidth: string | number;\n\theight: string | number;\n}\n\nconst LoadingModal = ({ width, height }: LoadingModalOwnProps): ReactElement => {\n\treturn <div style={{ height: height, width: width, display: \"flex\", justifyContent: \"center\", alignItems: \"center\", position: \"relative\", margin: \"auto\" }}><LoadingWheel /></div>\n}\n\nexport const PDFViewer = ({ closeModal, pdfObject }: PDFViewerOwnProps): ReactElement => {\n\n\tconst { width, height, ref } = useResizeDetector();\n\n\n\tif (pdfObject) {\n\t\treturn (\n\t\t\t<div className=\"pdf-viewer-modal\" ref={ref}>\n\t\t\t\t<div className=\"pdf-view\">\n\t\t\t\t\t{pdfObject.loading && <LoadingModal height={height ?? \"100%\"} width={width ?? \"100%\"} />}\n\t\t\t\t\t{(pdfObject.mediaUniqueName && !pdfObject.error && !pdfObject.loading) &&\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<PDFViewTouchZoomable\n\t\t\t\t\t\t\t\tpdfObjectUrl={pdfObject.objectURL}\n\t\t\t\t\t\t\t\twidthPx={width ?? 0}\n\t\t\t\t\t\t\t\theightPx={height}\n\t\t\t\t\t\t\t\tloading={<LoadingModal height={height ?? \"100%\"} width={width ?? \"100%\"} />}\n\t\t\t\t\t\t\t\tonLoadError={(error: Error) => MobileCRM.bridge.alert(`Load error: ${error?.message}`)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t</PDFViewTouchZoomable>\n\t\t\t\t\t\t\t<div className=\"close-button\">\n\t\t\t\t\t\t\t\t<Button onPress={closeModal}>Close</Button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</>}\n\t\t\t\t\t{(!pdfObject.loading && pdfObject.error) && <div className=\"pdf-error\">{pdfObject.error.message}</div>}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t} else {\n\t\treturn <div>No PDF Document!</div>\n\t}\n};\n\nexport default PDFViewer;\n","import { PDFViewer } from \"./PDFViewer\";\n\nexport default PDFViewer;\n","import React, { ReactElement, UIEvent, useCallback, useContext, useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ReactSVG } from \"react-svg\";\n\nimport \"./style.scss\";\nimport ChevronLeftIcon from \"assets/icons/chevron-left.svg\";\nimport GuideIcon from \"assets/icons/guide.svg\";\n\nimport store, { setPdfViewerObject, setSelectedGuide, State } from \"store\";\n\nimport { Context, MainNavigationContext, ModalContext, SuccessModalNavigationContext } from \"navigation/MainNavigator\";\n\nimport AnnotationImage from \"components/AnnotationImage\";\nimport FeedbackModal from \"components/FeedbackModal\";\n\nimport { GuidePlayer, ImageComponent, AvatarComponent } from \"@resconet/houston-ui\";\nimport { Feedback } from \"@resconet/houston-service\";\nimport HoustonService from \"api/houstonService\";\nimport { Drawer } from \"@mui/material\";\nimport ModalContentWrapper from \"components/ModalContentWrapper/modalContentWrapper\";\nimport { isTablet, Orientation, useOrientation } from \"api/tabletTools\";\nimport PDFViewer from \"components/PDFViewer\";\nimport { imageToBlob } from \"components/CollectStep\";\n\nexport const AnnotationImageWrapper: ImageComponent = ({ imageUniqueName, style }) => {\n\treturn (\n\t\t<>\n\t\t\t<AnnotationImage\n\t\t\t\tstyle={style}\n\t\t\t\tfetchMethod=\"byUniqueName\"\n\t\t\t\tannotationName={imageUniqueName}\n\t\t\t\tisThumbnail={false}\n\t\t\t\tplaceholderIcon={GuideIcon}\n\t\t\t\thasFullscreenMode={true}\n\t\t\t/>\n\t\t</>\n\t);\n};\n\nexport const ImageFromStore: ImageComponent = ({ imageUniqueName, style }) => {\n\treturn (\n\t\t<>\n\t\t\t<AnnotationImage\n\t\t\t\tstyle={style}\n\t\t\t\tfetchMethod=\"byUniqueNameFromStore\"\n\t\t\t\tannotationName={imageUniqueName}\n\t\t\t\tisThumbnail={false}\n\t\t\t\tplaceholderIcon={GuideIcon}\n\t\t\t\thasFullscreenMode={false}\n\t\t\t/>\n\t\t</>\n\t);\n};\n\nexport const AvatarComponentWrapper: AvatarComponent = ({ regardingId }) => {\n\treturn (\n\t\t<>\n\t\t\t<AnnotationImage\n\t\t\t\tfetchMethod=\"byIdAndName\"\n\t\t\t\tannotationName=\"UserImage\"\n\t\t\t\tisThumbnail={false}\n\t\t\t\tplaceholderIcon={GuideIcon}\n\t\t\t\thasFullscreenMode={false}\n\t\t\t\tannotationId={regardingId}\n\t\t\t/>\n\t\t</>\n\t);\n};\n\nexport type ModalState = \"visible\" | \"hidden\";\n\nexport const GuideDetail = (): ReactElement => {\n\tconst mainNavigate = useContext(MainNavigationContext) as Context;\n\tconst { setFeedbackMessage } = useContext(SuccessModalNavigationContext) as ModalContext;\n\n\tconst dispatch = useDispatch();\n\tconst guide = useSelector((state: State) => state.selectedGuide);\n\tconst categories = useSelector((state: State) => state.categories);\n\tconst [categoryName, setCategoryName] = useState(\"\");\n\tconst [displayReview, setDisplayReview] = useState<ModalState>(\"hidden\");\n\tconst [displayPDFView, setDisplayPDFView] = useState<ModalState>(\"hidden\");\n\tconst [timePassed, setTimePassed] = useState<boolean>(false);\n\tconst [timeoutId, setTimeoutId] = useState(0);\n\tconst [pdfViewerDocumentObject] = useSelector((state: State) => [state.pdfViewerObject]);\n\n\tuseEffect(() => {\n\t\tif (guide) {\n\t\t\tsetTimeoutId(\n\t\t\t\twindow.setTimeout(() => {\n\t\t\t\t\tsetTimePassed(true);\n\t\t\t\t}, 10000)\n\t\t\t);\n\t\t} else {\n\t\t\tsetTimePassed(false);\n\t\t}\n\t}, [guide]);\n\n\tconst [isHeaderVisible, setHeaderVisible] = useState(false);\n\n\tconst houstonServiceRef = useRef(new HoustonService());\n\n\tconst NavbarClassList = `guide-detail__navbar ${isHeaderVisible && \"guide-detail__navbar--full\"}`;\n\n\tconst orientation = useOrientation();\n\tconst handleBackClick = useCallback((): void => {\n\t\twindow.clearTimeout(timeoutId);\n\n\t\tif (timePassed) {\n\t\t\tsetDisplayReview(\"visible\");\n\t\t} else {\n\t\t\tcancelGuide();\n\t\t}\n\t}, [timePassed, timeoutId, orientation]);\n\n\tconst cancelGuide = (): void => {\n\t\tconst existsSelectedEquipment = store.getState().selectedEquipment;\n\t\tif (existsSelectedEquipment && !(orientation === Orientation.Landscape && isTablet())) {\n\t\t\tmainNavigate(\"equipment-navigator\");\n\t\t} else {\n\t\t\tmainNavigate(\"tabbar-navigator\");\n\t\t}\n\t\tsetTimeout(() => {\n\t\t\tdispatch(setSelectedGuide(null));\n\t\t\tsetDisplayReview(\"hidden\");\n\t\t}, 300);\n\t};\n\n\tconst handleScroll = (event: UIEvent<HTMLElement>): void => {\n\t\tif (event.cancelable) {\n\t\t\tevent.preventDefault();\n\t\t}\n\n\t\tconst target = event.target as HTMLElement;\n\t\tconst top = 0;\n\n\t\tconst titleEl = target.querySelector(\".guide-player__information\")?.querySelector(\"h1\");\n\t\tconst titleTop = titleEl?.getBoundingClientRect().top || 100;\n\n\t\tif (titleTop < top && !isHeaderVisible) {\n\t\t\tsetHeaderVisible(true);\n\t\t} else if (titleTop > top && isHeaderVisible) {\n\t\t\tsetHeaderVisible(false);\n\t\t}\n\t};\n\tconst returnClickCallbackHandler = (): void => {\n\t\tsetDisplayReview(\"hidden\");\n\t\tcancelGuide();\n\t};\n\n\tconst submitClick = useCallback((feedback: Feedback): void => {\n\t\treturnClickCallbackHandler();\n\t\tmainNavigate(\"success-modal-toggle\");\n\t\tsetFeedbackMessage(MessageToDisplay());\n\t\thoustonServiceRef.current.saveFeedback(feedback);\n\t}, []);\n\n\tconst openPDFClick = useCallback(async (mediaUniqueName: string): Promise<void> => {\n\t\tif (!pdfViewerDocumentObject || pdfViewerDocumentObject.mediaUniqueName !== mediaUniqueName) {\n\t\t\tsetDisplayPDFView(\"visible\");\n\t\t\tdispatch(setPdfViewerObject({ mediaUniqueName: \"\", objectURL: \"\", loading: true }));\n\t\t\tconst PDFMedia = await houstonServiceRef.current.loadPDFByUniqueName(mediaUniqueName);\n\t\t\tif (PDFMedia) {\n\t\t\t\tconst blob = await imageToBlob(PDFMedia);\n\t\t\t\tconst blobUrl = URL.createObjectURL(blob);\n\t\t\t\tdispatch(setPdfViewerObject({ mediaUniqueName: PDFMedia.imageUniqueName, objectURL: blobUrl, loading: false }));\n\t\t\t} else {\n\t\t\t\tdispatch(\n\t\t\t\t\tsetPdfViewerObject({ mediaUniqueName: \"\", objectURL: \"\", loading: false, error: new Error(\"Failed load the PDF document.\") })\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}, []);\n\n\tuseEffect(() => {\n\t\tconst category = categories.find((category) => category.id === guide?.categoryId);\n\t\tif (category) setCategoryName(category?.name);\n\t\telse setCategoryName(\"\");\n\t}, [guide]);\n\n\tif (!guide) return <></>;\n\treturn (\n\t\t<div style={{ width: \"100%\" }}>\n\t\t\t<div className=\"guide-detail\" onScroll={handleScroll}>\n\t\t\t\t<section>\n\t\t\t\t\t<nav className={NavbarClassList}>\n\t\t\t\t\t\t<i className=\"guide-detail__icon-back\" onClick={handleBackClick}>\n\t\t\t\t\t\t\t<ReactSVG src={ChevronLeftIcon} />\n\t\t\t\t\t\t</i>\n\t\t\t\t\t\t<h1>{guide.name || \"No name found\"}</h1>\n\t\t\t\t\t\t<span />\n\t\t\t\t\t</nav>\n\t\t\t\t</section>\n\t\t\t\t<GuidePlayer\n\t\t\t\t\tguide={guide}\n\t\t\t\t\tusedInMobileApp\n\t\t\t\t\timageComponent={AnnotationImageWrapper}\n\t\t\t\t\tcategoryName={categoryName}\n\t\t\t\t\tavatarComponent={AvatarComponentWrapper}\n\t\t\t\t\tshowPDFViewerAction={openPDFClick}\n\t\t\t\t/>\n\t\t\t\t<Drawer\n\t\t\t\t\tanchor=\"bottom\"\n\t\t\t\t\topen={displayReview === \"visible\"}\n\t\t\t\t\tPaperProps={{ style: { backgroundColor: \"transparent\", alignItems: \"center\" } }}\n\t\t\t\t>\n\t\t\t\t\t<ModalContentWrapper\n\t\t\t\t\t\tcontentWidthPercentage={orientation === Orientation.Portrait ? 100 : 80}\n\t\t\t\t\t\tcontentHeightPercentage={90}\n\t\t\t\t\t\tcloseButtonText=\"Skip\"\n\t\t\t\t\t\tonCancelClick={returnClickCallbackHandler}\n\t\t\t\t\t\troundedCorner\n\t\t\t\t\t>\n\t\t\t\t\t\t<FeedbackModal submitClick={submitClick} guide={guide}></FeedbackModal>\n\t\t\t\t\t</ModalContentWrapper>\n\t\t\t\t</Drawer>\n\t\t\t\t<Drawer\n\t\t\t\t\tanchor=\"bottom\"\n\t\t\t\t\topen={displayPDFView === \"visible\"}\n\t\t\t\t\tPaperProps={{ style: { backgroundColor: \"transparent\", alignItems: \"center\" } }}\n\t\t\t\t>\n\t\t\t\t\t<ModalContentWrapper\n\t\t\t\t\t\tcontentWidthPercentage={orientation === Orientation.Portrait ? 100 : 80}\n\t\t\t\t\t\tcontentHeightPercentage={100}\n\t\t\t\t\t\tcloseButtonText=\"Close\"\n\t\t\t\t\t\tonCancelClick={() => setDisplayPDFView(\"hidden\")}\n\t\t\t\t\t\troundedCorner={true}\n\t\t\t\t\t>\n\t\t\t\t\t\t<PDFViewer closeModal={() => setDisplayPDFView(\"hidden\")} pdfObject={pdfViewerDocumentObject} />\n\t\t\t\t\t</ModalContentWrapper>\n\t\t\t\t</Drawer>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport const MessageToDisplay = (): ReactElement => {\n\treturn (\n\t\t<p className=\"success-modal__p\">\n\t\t\tfor making the guides better!\n\t\t\t<br />\n\t\t\tPlease sync in settings\n\t\t\t<br /> to upload feedback to server.\n\t\t</p>\n\t);\n};\nexport default React.memo(GuideDetail);\n","import { ReactElement, useCallback, useContext, useEffect, useRef, useState } from \"react\";\nimport { Fit, Guide, HoustonServiceTools, Step, User } from \"@resconet/houston-service\";\n\nimport HoustonService from \"api/houstonService\";\n\nimport { CollectNavigationContext, Context as CollectContext } from \"navigation/CollectNavigator\";\nimport { MainNavigationContext, Context as MainContext } from \"navigation/MainNavigator\";\n\nimport { CollectForm, CollectFormStep, useCollectFormContext } from \"containers/CollectScreen/store\";\nimport { AvatarComponentWrapper, ImageFromStore, ModalState } from \"containers/GuideDetail/guideDetail\";\n\nimport Button from \"components/Button\";\nimport { CollectProps } from \"containers/CollectScreen\";\nimport { GuidePlayer } from \"@resconet/houston-ui\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setImagesToSave, setPdfViewerObject, State } from \"store\";\nimport { loadProfileInfoAsync } from \"api/profileLoader\";\nimport { CircularProgress, Drawer, Modal } from \"@mui/material\";\nimport { imageToBlob } from \"components/CollectStep\";\nimport ModalContentWrapper from \"components/ModalContentWrapper/modalContentWrapper\";\nimport PDFViewer from \"components/PDFViewer\";\nimport { Orientation } from \"api/tabletTools\";\n\ninterface Props extends CollectProps {\n\tisActive: boolean;\n}\n\nconst dataUrlToPureBase64 = (dataUrl: string): string => {\n\treturn dataUrl.split(\",\")[1];\n};\n\nconst blobUrlToBase64 = (blobUrl: string): Promise<string> => {\n\treturn new Promise((resolve, reject) => {\n\t\tconst xhr = new XMLHttpRequest();\n\t\txhr.open(\"GET\", blobUrl);\n\t\txhr.responseType = \"blob\";\n\t\txhr.onload = () => {\n\t\t\tif (xhr.status === 200) {\n\t\t\t\tconst reader = new FileReader();\n\t\t\t\treader.onloadend = () => {\n\t\t\t\t\tresolve(dataUrlToPureBase64(reader.result as string));\n\t\t\t\t};\n\t\t\t\treader.readAsDataURL(xhr.response);\n\t\t\t} else {\n\t\t\t\treject(xhr.statusText);\n\t\t\t}\n\t\t};\n\t\txhr.send();\n\t});\n};\n\nconst CollectScreenThree = ({ isActive, onSendCallback }: Props): ReactElement => {\n\tconst collectNavigate = useContext(CollectNavigationContext) as CollectContext;\n\tconst mainNavigate = useContext(MainNavigationContext) as MainContext;\n\n\tconst { state } = useCollectFormContext();\n\tconst [collectedGuide, setCollectedGuide] = useState<Guide | null>();\n\tconst imagesToSave = useSelector((state: State) => state.imagesToSave);\n\tconst dispatch = useDispatch();\n\tconst [pdfViewerDocumentObject] = useSelector((state: State) => [state.pdfViewerObject]);\n\tconst [displayPDFView, setDisplayPDFView] = useState<ModalState>(\"hidden\");\n\n\tuseEffect(() => {\n\t\tcreateCollectedGuide();\n\t}, [isActive]);\n\n\tconst createCollectedGuide = async (): Promise<void> => {\n\t\tif (!isActive) return;\n\t\tconst newGuide = await generateNewGuide(state);\n\t\tsetCollectedGuide(newGuide);\n\t};\n\n\tconst houstonServiceRef = useRef(new HoustonService());\n\n\tconst generateNewGuide = async (collected: CollectForm): Promise<Guide> => {\n\t\tconst guideId = HoustonServiceTools.generateGuid();\n\t\tconst author = await loadProfileInfoAsync();\n\n\t\tconst guideData: Guide = {\n\t\t\tid: guideId,\n\t\t\tname: collected.title,\n\t\t\tdescription: collected.description,\n\t\t\tlogicalName: \"\", //blank\n\t\t\tstatus: \"active\",\n\t\t\tstatusReason: \"collected\",\n\t\t\tversion: 1, //v1\n\t\t\timageUniqueName: collected.coverPhoto,\n\t\t\tsteps: generateSteps(collected.steps),\n\t\t\tauthors: [author],\n\t\t};\n\n\t\tif (collected?.category?.id) {\n\t\t\tguideData.categoryId = collected.category.id;\n\t\t}\n\n\t\tif (collected?.equipment?.id) {\n\t\t\tguideData.equipmentList = [collected.equipment];\n\t\t}\n\n\t\treturn guideData;\n\t};\n\n\tconst generateSteps = (steps: CollectFormStep[]): Step[] => {\n\t\treturn steps\n\t\t\t.slice()\n\t\t\t.sort((a, b) => a.id - b.id)\n\t\t\t.map(\n\t\t\t\t(step): Step => {\n\t\t\t\t\tconst guid = HoustonServiceTools.generateGuid();\n\t\t\t\t\treturn {\n\t\t\t\t\t\tid: guid,\n\t\t\t\t\t\ttitle: step.title,\n\t\t\t\t\t\tdescription: step.description,\n\t\t\t\t\t\timageUniqueName: step.imageUniqueName,\n\t\t\t\t\t\tcontent: [],\n\t\t\t\t\t\tmediaProperties: { fit: Fit.Cover },\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t);\n\t};\n\n\tconst [showProgress, setShowProgress] = useState(false);\n\tconst [progressValue, setProgressValue] = useState(0);\n\n\tconst publishGuide = async (): Promise<void> => {\n\t\tif (!collectedGuide) {\n\t\t\tthrow new Error(\"No guide to publish\");\n\t\t}\n\t\tsetShowProgress(true);\n\t\tlet count = 0;\n\n\t\tconst saveImagePromises = imagesToSave.map(async (image) => {\n\t\t\thoustonServiceRef.current.saveMedia({\n\t\t\t\timageUniqueName: image.imageUniqueName,\n\t\t\t\tregardingId: collectedGuide.id,\n\t\t\t\tsrcB64: await blobUrlToBase64(image.url),\n\t\t\t\tmimeType: image.mimeType,\n\t\t\t\tfileName: image.imageUniqueName,\n\t\t\t});\n\n\t\t\tcount++;\n\t\t\tsetProgressValue((count * 100) / imagesToSave.length);\n\t\t\tURL.revokeObjectURL(image.url);\n\t\t});\n\n\t\tawait Promise.all(saveImagePromises);\n\t\tsetShowProgress(false);\n\t\tdispatch(setImagesToSave([]));\n\t\tawait houstonServiceRef.current.saveGuide(collectedGuide);\n\t};\n\n\tconst onSendPress = async (): Promise<void> => {\n\t\ttry {\n\t\t\tawait publishGuide();\n\t\t} catch (e) {\n\t\t\tMobileCRM.bridge.alert(e);\n\t\t\treturn;\n\t\t}\n\n\t\tif (onSendCallback) {\n\t\t\tonSendCallback();\n\t\t} else {\n\t\t\tmainNavigate(\"success-modal-toggle\");\n\t\t}\n\t};\n\n\tconst onBackPress = (): void => {\n\t\tcollectNavigate(\"step-2\");\n\t};\n\n\tconst openPDFClick = useCallback(async (mediaUniqueName: string): Promise<void> => {\n\t\tif (!pdfViewerDocumentObject || pdfViewerDocumentObject.mediaUniqueName !== mediaUniqueName) {\n\t\t\tsetDisplayPDFView(\"visible\");\n\t\t\tdispatch(setPdfViewerObject({ mediaUniqueName: \"\", objectURL: \"\", loading: true }));\n\t\t\tconst PDFMedia = await houstonServiceRef.current.loadPDFByUniqueName(mediaUniqueName);\n\t\t\tif (PDFMedia) {\n\t\t\t\tconst blob = await imageToBlob(PDFMedia);\n\t\t\t\tconst blobUrl = URL.createObjectURL(blob);\n\t\t\t\tdispatch(setPdfViewerObject({ mediaUniqueName: PDFMedia.imageUniqueName, objectURL: blobUrl, loading: false }));\n\t\t\t} else {\n\t\t\t\tdispatch(setPdfViewerObject({ mediaUniqueName: \"\", objectURL: \"\", loading: false, error: new Error(\"Failed load the PDF document.\") }));\n\t\t\t}\n\t\t}\n\t}, []);\n\n\tconst categories = useSelector((state: State) => state.categories);\n\n\tconst [categoryName, setCategoryName] = useState(\"\");\n\n\tuseEffect(() => {\n\t\tconst category = categories.find((category) => category.id === collectedGuide?.categoryId);\n\t\tif (category) setCategoryName(category.name);\n\t}, [collectedGuide]);\n\n\treturn (\n\t\t<div className=\"collect-screen__content collect-screen--fullscreen\">\n\t\t\t<Modal open={showProgress}>\n\t\t\t\t<div style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", height: \"100%\", width: \"100%\" }}>\n\t\t\t\t\t<CircularProgress variant=\"determinate\" value={progressValue} />\n\t\t\t\t</div>\n\t\t\t</Modal>\n\t\t\t{collectedGuide && (\n\t\t\t\t<GuidePlayer\n\t\t\t\t\tguide={collectedGuide}\n\t\t\t\t\timageComponent={ImageFromStore}\n\t\t\t\t\tcategoryName={categoryName}\n\t\t\t\t\tavatarComponent={AvatarComponentWrapper}\n\t\t\t\t\tshowPDFViewerAction={openPDFClick}\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t<Drawer\n\t\t\t\tanchor=\"bottom\"\n\t\t\t\topen={displayPDFView === \"visible\"}\n\t\t\t\tPaperProps={{ style: { backgroundColor: \"transparent\", alignItems: \"center\" } }}\n\t\t\t>\n\t\t\t\t<ModalContentWrapper\n\t\t\t\t\tcontentWidthPercentage={orientation === Orientation.Portrait ? 100 : 80}\n\t\t\t\t\tcontentHeightPercentage={100}\n\t\t\t\t\tcloseButtonText=\"Close\"\n\t\t\t\t\tonCancelClick={() => setDisplayPDFView(\"hidden\")}\n\t\t\t\t\troundedCorner={true}\n\t\t\t\t>\n\t\t\t\t\t<PDFViewer closeModal={() => setDisplayPDFView(\"hidden\")} pdfObject={pdfViewerDocumentObject} />\n\t\t\t\t</ModalContentWrapper>\n\t\t\t</Drawer>\n\t\t\t<div className=\"collect-screen__end-buttons\">\n\t\t\t\t<br />\n\t\t\t\t<Button onPress={onSendPress}>Send</Button>\n\t\t\t\t<br />\n\t\t\t\t<Button onPress={onBackPress} theme=\"minimal\">\n\t\t\t\t\tBack\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default CollectScreenThree;\n","import { ReactElement, createContext, useState, useMemo, useCallback, useEffect } from \"react\";\nimport SwipeableViews from \"react-swipeable-views\";\n\nimport \"./style.scss\";\n\nimport CollectScreenOne from \"containers/CollectScreenOne\";\nimport CollectScreenTwo from \"containers/CollectScreenTwo\";\n\nimport CollectProgress from \"components/CollectProgress\";\nimport CollectScreenThree from \"containers/CollectScreenThree\";\nimport { CollectProps } from \"containers/CollectScreen\";\n\ntype View = \"step-1\" | \"step-2\" | \"step-3\";\nconst Views: View[] = [\"step-1\", \"step-2\", \"step-3\"];\n\nexport type Context = (newView: View) => void;\nexport const CollectNavigationContext = createContext<Context | undefined>(undefined);\n\nconst CollectNavigator = ({ onSendCallback }: CollectProps): ReactElement => {\n\tconst [view, setView] = useState<View>(\"step-1\");\n\n\tconst navigate = useCallback((newView: View): void => {\n\t\tsetView(newView);\n\t}, []);\n\n\tconst viewNameToIndex = useMemo(() => Views.indexOf(view), [view]);\n\n\tconst isActive = useCallback((viewName: string) => viewName === view, [view]);\n\n\tconst mainHeader = useMemo(() => {\n\t\tif (view === \"step-1\" || view === \"step-2\") {\n\t\t\treturn \"Add new guide\";\n\t\t} else if (view === \"step-3\") {\n\t\t\treturn \"Preview & Send\";\n\t\t} else {\n\t\t\tthrow new Error(\"Header not implemented\");\n\t\t}\n\t}, [view]);\n\n\treturn (\n\t\t<CollectNavigationContext.Provider value={navigate}>\n\t\t\t<CollectProgress currentVal={viewNameToIndex + 1} maxVal={Views.length} />\n\t\t\t<h1 className=\"collect-navigator__h1\">{mainHeader}</h1>\n\t\t\t<SwipeableViews index={viewNameToIndex} className=\"collect-navigator\" disabled>\n\t\t\t\t<CollectScreenOne />\n\t\t\t\t<CollectScreenTwo />\n\t\t\t\t<CollectScreenThree isActive={isActive(\"step-3\")} onSendCallback={onSendCallback}/>\n\t\t\t</SwipeableViews>\n\t\t</CollectNavigationContext.Provider>\n\t);\n};\n\nexport default CollectNavigator;\n","import { ReactElement } from \"react\";\nimport { useImmerReducer } from \"use-immer\";\n\nimport \"./style.scss\";\n\nimport { CollectFormContext, CollectFormReducer, InitialState, StoreValue } from \"./store\";\nimport CollectNavigator from \"navigation/CollectNavigator\";\n\nexport interface CollectProps {\n\tonSendCallback?: () => void;\n}\n\nconst CollectScreen = ({ onSendCallback }: CollectProps): ReactElement => {\n\tconst [state, dispatch] = useImmerReducer(CollectFormReducer, InitialState);\n\n\tconst handleChange = (name: string, newValue?: StoreValue): void => {\n\t\tdispatch({\n\t\t\tkey: name,\n\t\t\tpayload: { newValue: newValue || null },\n\t\t});\n\t};\n\n\treturn (\n\t\t<CollectFormContext.Provider value={{ state, handleChange }}>\n\t\t\t<CollectNavigator onSendCallback={onSendCallback} />\n\t\t</CollectFormContext.Provider>\n\t);\n};\n\nexport default CollectScreen;\n","import { ReactElement, useCallback, useEffect, useMemo, useState } from \"react\";\nimport SwipeableViews from \"react-swipeable-views\";\nimport Sidebar from \"react-sidebar\";\nimport Drawer from \"@mui/material/Drawer\";\nimport ModalContentWrapper from \"components/ModalContentWrapper/modalContentWrapper\";\nimport EquipmentNavigator from \"navigation/EquipmentNavigator\";\n\nimport \"./style.scss\";\n\nimport EquipmentList from \"containers/EquipmentList\";\nimport LibraryScreen from \"containers/LibraryScreen\";\nimport ExpertsList from \"containers/ExpertsList\";\n\nimport TabBar from \"components/TabBar\";\nimport { isTablet, Orientation, useOrientation } from \"api/tabletTools\";\nimport ProfileScreen from \"containers/ProfileScreen\";\nimport EquipmentListTablet from \"containers/EquipmentListTablet\";\nimport CollectScreen from \"containers/CollectScreen\";\nimport SuccessModal from \"components/SuccessModal\";\nimport { ModalState } from \"navigation/MainNavigator\";\n\nexport type View = \"equipment-list\" | \"library-screen\" | \"calls-list\";\nconst Views: View[] = [\"equipment-list\", \"library-screen\", \"calls-list\"];\n\nconst TabBarNavigator = (): ReactElement => {\n\tconst [view, setView] = useState<View>(\"equipment-list\");\n\n\tconst navigate = useCallback((newView: View): void => {\n\t\tsetView(newView);\n\t}, []);\n\n\tconst viewNameToIndex = useMemo(() => Views.indexOf(view), [view]);\n\tconst orientation = useOrientation();\n\tconst [tabletLandscapeUI, setTabletLandsapeUI] = useState(false);\n\tuseEffect(() => {\n\t\tsetTabletLandsapeUI(isTablet() && orientation === Orientation.Landscape);\n\t}, [orientation]);\n\n\tconst [isSidebarOpened, setIsSidebarOpened] = useState(false);\n\n\tconst onProfileClick = useCallback(() => {\n\t\tsetIsSidebarOpened(true);\n\t}, []);\n\n\tconst [isCollectSidebarOpen, setIsCollectSidebarOpen] = useState(false);\n\n\tconst onPlusClick = useCallback(() => {\n\t\tsetIsCollectSidebarOpen(true);\n\t}, []);\n\n\tconst askUserToCancel = async (): Promise<boolean> => {\n\t\tconst messageBox = new MobileCRM.UI.MessageBox(\"Delete draft?\");\n\t\tmessageBox.items = [\"Yes\", \"No\"];\n\n\t\tconst response = await messageBox.showAsync();\n\t\tif (response === \"Yes\") return true;\n\t\treturn false;\n\t};\n\n\tuseEffect(() => {\n\t\tconst overlayElement = document.getElementById(\"overlay\");\n\t\tconst overlayElement1 = document.getElementById(\"overlay1\");\n\t\tif (overlayElement)\n\t\t\toverlayElement.addEventListener(\"click\", () => {\n\t\t\t\tsetIsSidebarOpened(false);\n\t\t\t});\n\t\tif (overlayElement1)\n\t\t\toverlayElement1.addEventListener(\"click\", () => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst cancel = await askUserToCancel();\n\t\t\t\t\tif (cancel) setIsCollectSidebarOpen(false);\n\t\t\t\t})();\n\t\t\t});\n\t}, []);\n\n\tconst onSendCollectSuccess = useCallback(() => {\n\t\tsetIsCollectSidebarOpen(false);\n\t}, []);\n\n\treturn (\n\t\t<div className={`tabbar-navigator__wrapper${tabletLandscapeUI ? \"--tablet\" : \"\"}`}>\n\t\t\t<Sidebar\n\t\t\t\topen={isCollectSidebarOpen}\n\t\t\t\ttouch={false}\n\t\t\t\tpullRight\n\t\t\t\tsidebarClassName=\"tabbar-navigator__sidebar\"\n\t\t\t\tsidebar={\n\t\t\t\t\t<div className=\"tabbar-navigator__collect-wrapper\">\n\t\t\t\t\t\t{isCollectSidebarOpen && <CollectScreen onSendCallback={onSendCollectSuccess} />}\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t\toverlayId=\"overlay1\"\n\t\t\t></Sidebar>\n\t\t\t{tabletLandscapeUI && <TabBar view={viewNameToIndex} navigateTabBar={navigate} useTabletUI={tabletLandscapeUI} />}\n\t\t\t<SwipeableViews\n\t\t\t\tindex={viewNameToIndex}\n\t\t\t\tclassName={`tabbar-navigator${tabletLandscapeUI ? \"--tablet\" : \"\"}`}\n\t\t\t\tdisabled\n\t\t\t\tanimateTransitions={false}\n\t\t\t>\n\t\t\t\t{tabletLandscapeUI ? <EquipmentListTablet onProfileClick={onProfileClick} /> : <EquipmentList />}\n\t\t\t\t<LibraryScreen onProfileClickCallback={onProfileClick} onPlusClickCallback={onPlusClick} />\n\t\t\t\t<ExpertsList onProfileClickCallback={onProfileClick} />\n\t\t\t</SwipeableViews>\n\t\t\t{tabletLandscapeUI || <TabBar view={viewNameToIndex} navigateTabBar={navigate} useTabletUI={tabletLandscapeUI} />}\n\t\t</div>\n\t);\n};\n\nexport default TabBarNavigator;\n","import AnnotationImage from \"components/AnnotationImage\";\nimport { ReactElement } from \"react\";\nimport \"./style.scss\";\nimport GuideIcon from \"assets/icons/guide.svg\";\n\ninterface Props {\n\tchildren: string;\n\timageUniqueName: string;\n\tstepIndex: number;\n}\n\nconst StepPreview = ({ children, imageUniqueName: imageIniqueName, stepIndex }: Props): ReactElement => {\n\tconst onPreviewClick = (): void => {\n\t\tconst stepElement = document.getElementById(`step${stepIndex}`);\n\t\tconst mainElement = document.getElementsByClassName(\"guide-detail\")[0];\n\n\t\tmainElement?.scrollTo({ behavior: \"smooth\", top: (stepElement?.offsetTop || 0) - 60 });\n\t};\n\n\treturn (\n\t\t<div className=\"step-preview\" onClick={onPreviewClick}>\n\t\t\t<div className=\"step-preview__image-container\">\n\t\t\t\t<AnnotationImage\n\t\t\t\t\tfetchMethod=\"byUniqueName\"\n\t\t\t\t\tannotationName={imageIniqueName}\n\t\t\t\t\tisThumbnail={true}\n\t\t\t\t\tplaceholderIcon={GuideIcon}\n\t\t\t\t\thasFullscreenMode={false}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className=\"step-preview__content\">\n\t\t\t\t<span className=\"step-preview__index\">Step {stepIndex}</span>\n\t\t\t\t<span className=\"step-preview__title\">{children}</span>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default StepPreview;\n","import { GuideDetail } from \"./guideDetail\";\n\nexport default GuideDetail;","import { ReactElement, useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport StepPreview from \"components/StepPreview\";\nimport GuideDetail from \"containers/GuideDetail\";\nimport { State } from \"store\";\nimport \"./style.scss\";\nimport { isTablet, Orientation, useOrientation } from \"api/tabletTools\";\n\nconst GuideDetailTablet = (): ReactElement => {\n\tconst guide = useSelector((state: State) => state.selectedGuide);\n\tconst orientation = useOrientation();\n\tconst useTabletExtension = isTablet() && orientation === Orientation.Landscape;\n\n\tconst renderedGuideStepsPreviews = useMemo(() => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{guide?.steps.map((step, i) => (\n\t\t\t\t\t<StepPreview imageUniqueName={step.imageUniqueName} stepIndex={i + 1}>\n\t\t\t\t\t\t{step.title}\n\t\t\t\t\t</StepPreview>\n\t\t\t\t))}\n\t\t\t</>\n\t\t);\n\t}, [guide]);\n\n\tconst onIntroductionClick = (): void => {\n\t\tconst introductionElement = document.getElementById(\"introduction\");\n\t\tconst mainElement = document.getElementsByClassName(\"guide-detail\")[0];\n\n\t\tmainElement?.scrollTo({ behavior: \"smooth\", top: (introductionElement?.offsetTop || 0) - 70 });\n\t};\n\n\treturn (\n\t\t<div className=\"guide-detail-tablet\">\n\t\t\t{useTabletExtension && (\n\t\t\t\t<div className=\"guide-detail-tablet__side-navigator\">\n\t\t\t\t\t<h1>Content</h1>\n\t\t\t\t\t<div className=\"guide-detail-tablet__introduction\" onClick={onIntroductionClick}>\n\t\t\t\t\t\tIntroduction\n\t\t\t\t\t</div>\n\t\t\t\t\t<hr className=\"guide-detail-tablet__separator\" />\n\t\t\t\t\t<div className=\"guide-detail-tablet__previews-container\">{renderedGuideStepsPreviews}</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t<GuideDetail />\n\t\t</div>\n\t);\n};\n\nexport default GuideDetailTablet;\n","export default __webpack_public_path__ + \"static/media/check-circle.eb2863fa.svg\";","import { ReactElement, useContext } from \"react\";\n\nimport \"./style.scss\";\nimport CheckCircleIcon from \"assets/icons/check-circle.svg\";\n\nimport { Context, MainNavigationContext, ModalContext, SuccessModalNavigationContext } from \"navigation/MainNavigator\";\nimport Button from \"components/Button\";\nimport { ReactSVG } from \"react-svg\";\n\ninterface Props {\n\tonCloseClickCallback?: () => void;\n}\n\nconst SuccessModal = ({ onCloseClickCallback }: Props): ReactElement => {\n\tconst mainNavigate = useContext(MainNavigationContext) as Context;\n\tconst { feedbackMessage, setFeedbackMessage } = useContext(SuccessModalNavigationContext) as ModalContext;\n\tconst onCloseClick = (): void => {\n\t\tif (onCloseClickCallback) onCloseClickCallback();\n\t\telse mainNavigate(\"success-modal-toggle\");\n\t\tsetFeedbackMessage(undefined);\n\t};\n\n\treturn (\n\t\t<div className=\"success-modal__popup\">\n\t\t\t<i className=\"success-modal__icon-check-circle\">\n\t\t\t\t<ReactSVG src={CheckCircleIcon} />\n\t\t\t</i>\n\t\t\t<h1 className=\"success-modal__h1\"> Thank you</h1>\n\t\t\t<MessageToDisplay FeedbackMessage={feedbackMessage}></MessageToDisplay>\n\t\t\t<Button onPress={onCloseClick}>Close</Button>\n\t\t</div>\n\t);\n};\n\ninterface MessageToDisplayProps {\n\tFeedbackMessage: ReactElement | undefined,\n}\n\nconst MessageToDisplay: React.FC<MessageToDisplayProps> = ({ FeedbackMessage }): ReactElement => {\n\tif (FeedbackMessage) {\n\t\treturn (<span>\n\t\t\t{FeedbackMessage}\n\t\t</span>\n\t\t)\n\t} else {\n\t\treturn (<p className=\"success-modal__p\">\n\t\t\tfor sharing your wisdom!\n\t\t\t<br />\n\t\t\tPlease sync in settings\n\t\t\t<br /> to upload guide to server.\n\t\t</p>)\n\t}\n}\n\nexport default SuccessModal;\n","import React, { createContext, FC, ReactElement, useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport \"./style.scss\";\n\nimport { setSelectedGuide, State } from \"store\";\n\nimport TabBarNavigator from \"navigation/TabBarNavigator\";\nimport EquipmentNavigator from \"navigation/EquipmentNavigator\";\nimport { registerAndroidBackHandler } from \"api/androidBackClick\";\nimport CollectScreen from \"containers/CollectScreen\";\nimport GuideDetailTablet from \"containers/GuideDetailTablet\";\nimport { isTablet, Orientation, useOrientation } from \"api/tabletTools\";\nimport SuccessModal from \"components/SuccessModal\";\nimport Drawer from \"@mui/material/Drawer\";\nimport ModalContentWrapper from \"components/ModalContentWrapper/modalContentWrapper\";\n\nexport type ModalState = \"visible\" | \"hidden\";\n\nexport type View = \"tabbar-navigator\" | \"equipment-navigator\" | \"guide-detail\" | \"fullscreen-modal-toggle\" | \"success-modal-toggle\";\n\nexport type Context = (newView: View) => void;\n\nexport interface ModalContext {\n\tfeedbackMessage: ReactElement | undefined;\n\tsetFeedbackMessage: (feedbackMessage: ReactElement | undefined) => void;\n}\nexport const MainNavigationContext = createContext<Context | undefined>(undefined);\nexport const SuccessModalNavigationContext = createContext<ModalContext | undefined>(undefined);\n\nconst MainNavigator = (): ReactElement => {\n\tconst selectedEquipment = useSelector((state: State) => state.selectedEquipment);\n\tconst selectedGuide = useSelector((state: State) => state.selectedGuide);\n\tconst dispatch = useDispatch();\n\n\tconst [view, setView] = useState<View>(\"tabbar-navigator\");\n\tconst [fullscreenModalState, setFullscreenModalState] = useState<ModalState>(\"hidden\");\n\tconst [successModalState, setSuccessModalState] = useState<ModalState>(\"hidden\");\n\tconst orientation = useOrientation();\n\tconst [feedbackMessage, setFeedbackMessage] = useState<ReactElement | undefined>();\n\n\tuseEffect(() => {\n\t\tconst isLandscapeTablet = isTablet() && orientation === Orientation.Landscape;\n\n\t\tif (!selectedEquipment || view === \"guide-detail\") return;\n\n\t\tif (isLandscapeTablet) {\n\t\t\tnavigate(\"tabbar-navigator\");\n\t\t\treturn;\n\t\t}\n\n\t\tnavigate(\"equipment-navigator\");\n\t}, [selectedEquipment, orientation]);\n\n\tuseEffect(() => {\n\t\tif (!selectedGuide) return;\n\t\tnavigate(\"guide-detail\");\n\t}, [selectedGuide]);\n\n\tuseEffect(() => {\n\t\tregisterAndroidBackHandler(\"main-navigator\", androidBackHandler);\n\t}, [view]);\n\n\tconst androidBackHandler = (): void => {\n\t\tif (view === \"guide-detail\") {\n\t\t\tnavigate(\"equipment-navigator\");\n\t\t\tsetTimeout(() => {\n\t\t\t\tdispatch(setSelectedGuide(null));\n\t\t\t}, 300);\n\t\t}\n\t};\n\n\tconst askUserToCancel = async (): Promise<boolean> => {\n\t\tconst messageBox = new MobileCRM.UI.MessageBox(\"Delete draft?\");\n\t\tmessageBox.items = [\"Yes\", \"No\"];\n\n\t\tconst response = await messageBox.showAsync();\n\t\tif (response === \"Yes\") return true;\n\t\treturn false;\n\t};\n\n\tconst navigate = useCallback(\n\t\tasync (newView: View): Promise<void> => {\n\t\t\tif (newView === \"fullscreen-modal-toggle\") {\n\t\t\t\tconst newModalState = fullscreenModalState === \"visible\" ? \"hidden\" : \"visible\";\n\n\t\t\t\tif (newModalState === \"hidden\" && !(await askUserToCancel())) return;\n\n\t\t\t\tsetFullscreenModalState(newModalState);\n\t\t\t} else if (newView === \"success-modal-toggle\") {\n\t\t\t\tconst newModalState = successModalState === \"visible\" ? \"hidden\" : \"visible\";\n\t\t\t\tsetSuccessModalState(newModalState);\n\t\t\t\tsetFullscreenModalState(\"hidden\");\n\t\t\t} else {\n\t\t\t\tsetView(newView);\n\t\t\t}\n\t\t},\n\t\t[fullscreenModalState, successModalState]\n\t);\n\n\treturn (\n\t\t<MainNavigationContext.Provider value={navigate}>\n\t\t\t<SuccessModalNavigationContext.Provider value={{ feedbackMessage, setFeedbackMessage }}>\n\t\t\t\t<TabBarNavigator />\n\t\t\t\t<Drawer anchor=\"right\" open={view === \"guide-detail\"} PaperProps={{ style: { backgroundColor: \"transparent\", overflow: \"hidden\" } }}>\n\t\t\t\t\t<ModalContentWrapper contentHeightPercentage={100} contentWidthPercentage={100}>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<GuideDetailTablet />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</ModalContentWrapper>\n\t\t\t\t</Drawer>\n\t\t\t\t<Drawer anchor=\"right\" open={view === \"equipment-navigator\"} PaperProps={{ style: { backgroundColor: \"transparent\" } }}>\n\t\t\t\t\t<ModalContentWrapper contentHeightPercentage={100} contentWidthPercentage={100}>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<EquipmentNavigator />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</ModalContentWrapper>\n\t\t\t\t</Drawer>\n\t\t\t\t<Drawer anchor=\"bottom\" open={fullscreenModalState === \"visible\"} PaperProps={{ style: { backgroundColor: \"transparent\" } }}>\n\t\t\t\t\t<ModalContentWrapper\n\t\t\t\t\t\tcloseButtonText=\"Cancel\"\n\t\t\t\t\t\tcontentHeightPercentage={100}\n\t\t\t\t\t\tcontentWidthPercentage={100}\n\t\t\t\t\t\troundedCorner\n\t\t\t\t\t\tonCancelClick={() => navigate(\"fullscreen-modal-toggle\")}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<CollectScreen />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</ModalContentWrapper>\n\t\t\t\t</Drawer>\n\t\t\t\t<Drawer\n\t\t\t\t\tanchor=\"bottom\"\n\t\t\t\t\topen={successModalState === \"visible\"}\n\t\t\t\t\tPaperProps={{ style: { backgroundColor: \"transparent\", alignItems: \"center\" } }}\n\t\t\t\t>\n\t\t\t\t\t<ModalContentWrapper\n\t\t\t\t\t\tcontentHeightPercentage={orientation === Orientation.Portrait ? 50 : 80}\n\t\t\t\t\t\tcontentWidthPercentage={orientation === Orientation.Portrait ? 100 : 80}\n\t\t\t\t\t\troundedCorner\n\t\t\t\t\t\tonCancelClick={() => navigate(\"fullscreen-modal-toggle\")}\n\t\t\t\t\t>\n\t\t\t\t\t\t<SuccessModal onCloseClickCallback={() => setSuccessModalState(\"hidden\")} />\n\t\t\t\t\t</ModalContentWrapper>\n\t\t\t\t</Drawer>\n\t\t\t</SuccessModalNavigationContext.Provider>\n\t\t</MainNavigationContext.Provider>\n\t);\n};\n\nexport default React.memo(MainNavigator);\n","export default __webpack_public_path__ + \"static/media/logout.749f26b5.svg\";","export default __webpack_public_path__ + \"static/media/sync.60541be2.svg\";","import { ReactElement } from \"react\";\nimport { ReactSVG } from \"react-svg\";\n\nimport \"./style.scss\";\n\nimport ChevronRightIcon from \"assets/icons/chevron-right.svg\";\n\ninterface Props {\n\ttitle: string;\n\ticonPath: string;\n\tonClick: () => void;\n}\n\nconst ProfileAction = ({ title, iconPath, onClick }: Props): ReactElement => {\n\treturn (\n\t\t<div className=\"profile-action\" onClick={onClick}>\n\t\t\t<i className=\"profile-action__icon\" data-test=\"ProfileList\">\n\t\t\t\t<ReactSVG src={iconPath} />\n\t\t\t</i>\n\t\t\t<span className=\"profile-action__title\">{title}</span>\n\t\t\t<i className=\"profile-action__chevron-right\">\n\t\t\t\t<ReactSVG src={ChevronRightIcon} />\n\t\t\t</i>\n\t\t</div>\n\t);\n};\n\nexport default ProfileAction;\n","import React, { ReactElement, useCallback, useContext, useEffect, useState } from \"react\";\nimport { ReactSVG } from \"react-svg\";\n\nimport \"./style.scss\";\nimport ProfileIcon from \"assets/icons/profile.svg\";\nimport BackIcon from \"assets/icons/chevron-left.svg\";\nimport LogoutIcon from \"assets/icons/logout.svg\";\nimport SyncIcon from \"assets/icons/sync.svg\";\n\nimport { isUserLoggedIn, logout } from \"api/login\";\nimport { getAppVersionAsync } from \"api/configuration\";\nimport { loadProfileInfoAsync, ProfileInfo } from \"api/profileLoader\";\nimport { doSync } from \"api/synchronization\";\n\nimport ProfileAction from \"components/ProfileAction\";\nimport { Context, RootNavigationContext } from \"navigation/RootNavigator\";\nimport AnnotationImage from \"components/AnnotationImage\";\n\ninterface ProfileData {\n\tappVersion: string;\n\tprofileInfo: ProfileInfo;\n\tisLoggedIn: boolean;\n}\n\ninterface Props {\n\tshowBackButton?: boolean;\n}\n\nconst ProfileScreen = ({ showBackButton }: Props): ReactElement => {\n\tconst rootNavigate = useContext(RootNavigationContext) as Context;\n\tconst [profileData, setProfileData] = useState<ProfileData | null>(null);\n\n\tuseEffect(() => {\n\t\tloadProfileData();\n\t}, []);\n\n\tconst loadProfileData = async (): Promise<void> => {\n\t\tconst appVersion = await loadAppVersion();\n\t\tconst profileInfo = await loadProfileInfo();\n\t\tconst isLoggedIn = await isUserLoggedIn();\n\n\t\tsetProfileData({ appVersion, profileInfo, isLoggedIn });\n\t};\n\n\tconst loadProfileInfo = async (): Promise<ProfileInfo> => {\n\t\tconst response = await loadProfileInfoAsync();\n\t\treturn response;\n\t};\n\n\tconst loadAppVersion = async (): Promise<string> => {\n\t\tconst response = await getAppVersionAsync();\n\t\treturn response;\n\t};\n\n\tconst onBackClick = (): void => {\n\t\trootNavigate(\"main-navigator\");\n\t};\n\n\tconst onLogoutClick = useCallback(async (): Promise<void> => {\n\t\ttry {\n\t\t\tconst shouldLogout = await askUserToLogout();\n\t\t\tif (!shouldLogout) return;\n\n\t\t\tif (profileData?.isLoggedIn) {\n\t\t\t\tawait logout();\n\t\t\t}\n\t\t\trootNavigate(\"login-navigator\");\n\t\t} catch (e) {\n\t\t\tMobileCRM.bridge.alert(e);\n\t\t}\n\t}, [profileData?.isLoggedIn]);\n\n\tconst askUserToLogout = async (): Promise<boolean> => {\n\t\tconst messageBox = new MobileCRM.UI.MessageBox(\"Log Out?\");\n\t\tmessageBox.items = [\"Yes\", \"No\"];\n\n\t\tconst response = await messageBox.showAsync();\n\t\tif (response === \"Yes\") return true;\n\t\treturn false;\n\t};\n\n\tconst onSyncClick = useCallback(async (): Promise<void> => {\n\t\tdoSync();\n\t}, []);\n\n\tif (!profileData) return <div />;\n\treturn (\n\t\t<div className=\"profile-screen\">\n\t\t\t<nav className=\"profile-screen__navbar\">\n\t\t\t\t{showBackButton && (\n\t\t\t\t\t<i className=\"profile-screen__icon-back\" onClick={onBackClick} data-test=\"BackButton\">\n\t\t\t\t\t\t<ReactSVG src={BackIcon} />\n\t\t\t\t\t</i>\n\t\t\t\t)}\n\t\t\t</nav>\n\t\t\t<section className=\"profile-screen__jumbotron\">\n\t\t\t\t<i className=\"profile-screen__image\">\n\t\t\t\t\t<AnnotationImage\n\t\t\t\t\t\tfetchMethod=\"byIdAndName\"\n\t\t\t\t\t\tannotationId={profileData.profileInfo.id}\n\t\t\t\t\t\tannotationName=\"UserImage\"\n\t\t\t\t\t\tisThumbnail={true}\n\t\t\t\t\t\tplaceholderIcon={ProfileIcon}\n\t\t\t\t\t\thasFullscreenMode={false}\n\t\t\t\t\t/>\n\t\t\t\t</i>\n\t\t\t\t<h1 className=\"profile-screen__name\">{profileData.profileInfo?.name}</h1>\n\t\t\t\t<h2 className=\"profile-screen__position\">{profileData.profileInfo?.position}</h2>\n\t\t\t</section>\n\t\t\t<section className=\"profile-screen__actions\">\n\t\t\t\t<ProfileAction title=\"Log Out\" iconPath={LogoutIcon} onClick={onLogoutClick} />\n\t\t\t\t{profileData.isLoggedIn && <ProfileAction title=\"Sync\" iconPath={SyncIcon} onClick={onSyncClick} />}\n\t\t\t\t<span className=\"profile-screen__app-version\">\n\t\t\t\t\tv{profileData.appVersion} {process.env.REACT_APP_VERSION}\n\t\t\t\t</span>\n\t\t\t</section>\n\t\t</div>\n\t);\n};\n\nexport default React.memo(ProfileScreen);\n","import React, { ReactElement, createContext, useState, useEffect, useCallback, useMemo } from \"react\";\nimport SwipeableViews from \"react-swipeable-views\";\n\nimport \"./style.scss\";\n\nimport { isUserLoggedIn } from \"api/login\";\n\nimport LoginNavigator from \"navigation/LoginNavigator\";\nimport MainNavigator from \"navigation/MainNavigator\";\nimport ProfileScreen from \"containers/ProfileScreen\";\nimport { registerAndroidBackHandler } from \"api/androidBackClick\";\nimport Drawer from \"@mui/material/Drawer\";\nimport ModalContentWrapper from \"components/ModalContentWrapper/modalContentWrapper\";\nimport { isTablet, Orientation, useOrientation } from \"api/tabletTools\";\n\ntype View = \"login-navigator\" | \"main-navigator\" | \"profile-screen\";\n\nexport type Context = (newView: View) => void;\nexport const RootNavigationContext = createContext<Context | undefined>(undefined);\n\nconst RootNavigator = (): ReactElement => {\n\tconst [view, setView] = useState<View>(\"login-navigator\");\n\tconst [profileWidth, setProfileWidth] = useState(100);\n\tconst orientation = useOrientation();\n\n\tuseEffect(() => {\n\t\tif (isTablet()) {\n\t\t\tconst width = orientation === Orientation.Landscape ? 30 : 100;\n\t\t\tsetProfileWidth(width);\n\t\t}\n\t}, [orientation]);\n\n\tuseEffect(() => {\n\t\tloginUser();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tregisterAndroidBackHandler(\"root-navigator\", androidBackHandler);\n\t}, [view]);\n\n\tconst androidBackHandler = (): void => {\n\t\tif (view === \"profile-screen\") {\n\t\t\tnavigate(\"main-navigator\");\n\t\t}\n\t};\n\n\tconst loginUser = async (): Promise<void> => {\n\t\tconst isUserLogged = await isUserLoggedIn();\n\t\tsetView(isUserLogged ? \"main-navigator\" : \"login-navigator\");\n\t};\n\n\tconst navigate = useCallback((newView: View): void => {\n\t\tsetView(newView);\n\t}, []);\n\n\treturn (\n\t\t<RootNavigationContext.Provider value={navigate}>\n\t\t\t<Drawer anchor=\"bottom\" open={view === \"login-navigator\"} PaperProps={{ style: { backgroundColor: \"transparent\" } }}>\n\t\t\t\t<ModalContentWrapper contentWidthPercentage={100} contentHeightPercentage={100}>\n\t\t\t\t\t<LoginNavigator />\n\t\t\t\t</ModalContentWrapper>\n\t\t\t</Drawer>\n\t\t\t<MainNavigator />\n\t\t\t<Drawer\n\t\t\t\tanchor=\"left\"\n\t\t\t\topen={view === \"profile-screen\"}\n\t\t\t\tonClose={() => navigate(\"main-navigator\")}\n\t\t\t\tPaperProps={{ style: { backgroundColor: \"transparent\" } }}\n\t\t\t>\n\t\t\t\t<ModalContentWrapper contentHeightPercentage={100} contentWidthPercentage={profileWidth}>\n\t\t\t\t\t<ProfileScreen showBackButton={!(orientation === Orientation.Landscape && isTablet())} />\n\t\t\t\t</ModalContentWrapper>\n\t\t\t</Drawer>\n\t\t</RootNavigationContext.Provider>\n\t);\n};\n\nexport default RootNavigator;\n","const registerDeeplinkHandler = (deeplinkHandler: (data: string) => void): void => {\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t(window as any)[\"handleLaunch\"] = deeplinkHandler;\n};\n\nexport default registerDeeplinkHandler;\n","import { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { setSelectedEquipment, setSelectedGuide } from \"store\";\nimport registerDeeplinkHandler from \"api/deeplink\";\nimport HoustonService from \"api/houstonService\";\nimport {isUserLoggedIn} from \"api/login\";\n\nconst DeeplinkHandler = (): null => {\n\tconst dispatch = useDispatch();\n\n\tuseEffect(() => {\n\t\tregisterDeeplinkHandler((url) => {\n\t\t\tconst [entityName, entityId] = parseDeeplinkUrl(url);\n\n\t\t\tconst isLoggedIn = isUserLoggedIn();\n\t\t\tif(!isLoggedIn) {\n\t\t\t\talertUserToLogIn();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tif (entityName === \"fs_asset\") {\n\t\t\t\tloadEquipment(entityId);\n\t\t\t} else if (entityName === \"rh_guide\") {\n\t\t\t\tloadGuide(entityId);\n\t\t\t}\n\t\t});\n\t}, []);\n\n\tconst parseDeeplinkUrl = (url: string): [string, string] => {\n\t\tconst [key, value] = url.split(\";\");\n\t\treturn [key, value];\n\t};\n\n\tconst loadEquipment = async (id: string): Promise<void> => {\n\t\tconst houstonService = new HoustonService();\n\t\thoustonService\n\t\t\t.loadEquipmentById(id)\n\t\t\t.then((equipmentData) => {\n\t\t\t\tdispatch(setSelectedEquipment(equipmentData));\n\t\t\t})\n\t\t\t.catch(() => {\n\t\t\t\tMobileCRM.bridge.alert(\"Equipment not found\");\n\t\t\t});\n\t};\n\n\tconst loadGuide = async (id: string): Promise<void> => {\n\t\tconst houstonService = new HoustonService();\n\t\thoustonService\n\t\t\t.loadGuideById(id)\n\t\t\t.then((guideData) => {\n\t\t\t\tdispatch(setSelectedGuide(guideData));\n\t\t\t})\n\t\t\t.catch(() => {\n\t\t\t\tMobileCRM.bridge.alert(\"Equipment not found\");\n\t\t\t});\n\t};\n\n\tconst alertUserToLogIn = (): void => {\n\t\tMobileCRM.bridge.alert(\"Log In to see content\");\n\t}\n\n\treturn null;\n};\n\nexport default DeeplinkHandler;\n","import { ReactElement } from \"react\";\nimport \"./style.scss\";\n\nconst LoadingScreen = (): ReactElement => {\n\treturn <div className=\"loading-screen\" />;\n};\n\nexport default LoadingScreen;\n","import { ReactElement } from \"react\";\nimport { TransformWrapper, TransformComponent, ReactZoomPanPinchHandlers } from \"react-zoom-pan-pinch\";\n\nimport \"./style.scss\";\n\nimport AnnotationImage from \"components/AnnotationImage\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setZoomAnnotation, State } from \"store\";\n\nconst PinchableImage = (): ReactElement => {\n\tconst dispatch = useDispatch();\n\tconst zoomAnnotation = useSelector((state: State) => state.zoomAnnotation);\n\n\tconst onCloseClick = (): void => {\n\t\tdispatch(setZoomAnnotation(null));\n\t};\n\n\tif (!zoomAnnotation) return <></>;\n\treturn (\n\t\t<section className=\"pinchable-image\">\n\t\t\t<i className=\"pinchable-image__icon-close\" onClick={onCloseClick} />\n\t\t\t<TransformWrapper velocityAnimation={{ disabled: true }} centerOnInit>\n\t\t\t\t{({ zoomOut }: ReactZoomPanPinchHandlers ) => (\n\t\t\t\t\t<TransformComponent wrapperClass=\"pinchable-image__wrapper\">\n\t\t\t\t\t\t<AnnotationImage\n\t\t\t\t\t\t\tfetchMethod={zoomAnnotation.fetchMethod}\n\t\t\t\t\t\t\tannotationName={zoomAnnotation.annotationName}\n\t\t\t\t\t\t\tannotationId={zoomAnnotation.annotationId}\n\t\t\t\t\t\t\tisThumbnail={false}\n\t\t\t\t\t\t\tplaceholderIcon={null}\n\t\t\t\t\t\t\thasFullscreenMode={false}\n\t\t\t\t\t\t\tonImageLoad={() => zoomOut(0, 0, \"easeOut\")}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</TransformComponent>\n\t\t\t\t)}\n\t\t\t</TransformWrapper>\n\t\t</section>\n\t);\n};\n\nexport default PinchableImage;\n","import { ReactElement, useEffect, useState } from \"react\";\n\nimport { useDispatch } from \"react-redux\";\nimport { ToastContainer } from \"react-toastify\";\nimport smoothscroll from \"smoothscroll-polyfill\";\nimport \"@resconet/jsbridge\";\n\nimport \"styles/global.scss\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"animate.css\";\n\nimport { setCategories, setEquipment } from \"store\";\nimport { registerSyncFinishedHandler, registerSyncStartedHandler } from \"api/synchronization\";\nimport RootNavigator from \"navigation/RootNavigator\";\nimport DeeplinkHandler from \"components/DeeplinkHandler\";\nimport LoadingScreen from \"components/LoadingScreen\";\nimport { invokeAndroidBackHandlers } from \"api/androidBackClick\";\nimport PinchableImage from \"containers/PinchableImage\";\nimport HoustonService from \"api/houstonService\";\n\nconst App = (): ReactElement => {\n\tconst [isSyncRunning, setSyncRunning] = useState(false);\n\tconst dispatch = useDispatch();\n\n\tuseEffect(() => {\n\t\tif(isSyncRunning)return;\n\n\t\tMobileCRM.bridge.enableDebug();\n\t\tsmoothscroll.polyfill();\n\n\t\tloadInitialData();\n\n\t\tregisterSyncHandlers();\n\t\tregisterAndroidBackHandlers();\n\t}, [isSyncRunning]);\n\n\tconst loadInitialData = async (): Promise<void> => {\n\t\tconst houstonService = new HoustonService();\n\n\t\ttry {\n\t\t\tconst loadedCategories = await houstonService.loadAllCategories();\n\t\t\tconst loadedEquipment = await houstonService.loadAllEquipment();\n\n\t\t\tdispatch(setEquipment(loadedEquipment));\n\t\t\tdispatch(setCategories(loadedCategories));\n\t\t} catch (e) {\n\t\t\tMobileCRM.bridge.alert(e);\n\t\t}\n\t};\n\n\tconst registerAndroidBackHandlers = (): void => {\n\t\tMobileCRM.Platform.preventBackButton(() => {\n\t\t\treturn;\n\t\t});\n\t};\n\n\tconst registerSyncHandlers = (): void => {\n\t\tregisterSyncStartedHandler(() => {\n\t\t\tsetSyncRunning(true);\n\t\t});\n\n\t\tregisterSyncFinishedHandler(() => {\n\t\t\tsetSyncRunning(false);\n\t\t});\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t{isSyncRunning ? (\n\t\t\t\t<LoadingScreen />\n\t\t\t) : (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t{/* <ImagePicker /> */}\n\t\t\t\t\t<RootNavigator />\n\t\t\t\t\t<ToastContainer limit={1} />\n\t\t\t\t\t<PinchableImage />\n\t\t\t\t\t<DeeplinkHandler />\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry);\n\t\t\tgetFID(onPerfEntry);\n\t\t\tgetFCP(onPerfEntry);\n\t\t\tgetLCP(onPerfEntry);\n\t\t\tgetTTFB(onPerfEntry);\n\t\t});\n\t}\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider as ReduxProvider } from \"react-redux\";\n\nimport store from \"store\";\n\nimport App from \"App\";\nimport reportWebVitals from \"reportWebVitals\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<ReduxProvider store={store}>\n\t\t\t<App />\n\t\t</ReduxProvider>\n\t</React.StrictMode>,\n\tdocument.querySelector(\"#root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}